# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mc', [dirname(__file__)])
        except ImportError:
            import _mc
            return _mc
        if fp is not None:
            try:
                _mod = imp.load_module('_mc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mc = swig_import_helper()
    del swig_import_helper
else:
    import _mc
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mc.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """
        value(self) -> PyObject

        1
        """
        return _mc.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """
        incr(self, size_t n = 1) -> SwigPyIterator
        incr(self) -> SwigPyIterator

        1
        """
        return _mc.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """
        decr(self, size_t n = 1) -> SwigPyIterator
        decr(self) -> SwigPyIterator

        1
        """
        return _mc.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """
        distance(self, SwigPyIterator x) -> ptrdiff_t

        1
        """
        return _mc.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """
        equal(self, SwigPyIterator x) -> bool

        1
        """
        return _mc.SwigPyIterator_equal(self, *args)

    def copy(self):
        """
        copy(self) -> SwigPyIterator

        1
        """
        return _mc.SwigPyIterator_copy(self)

    def next(self):
        """
        next(self) -> PyObject

        1
        """
        return _mc.SwigPyIterator_next(self)

    def __next__(self):
        """
        __next__(self) -> PyObject

        1
        """
        return _mc.SwigPyIterator___next__(self)

    def previous(self):
        """
        previous(self) -> PyObject

        1
        """
        return _mc.SwigPyIterator_previous(self)

    def advance(self, *args):
        """
        advance(self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _mc.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, SwigPyIterator x) -> bool

        1
        """
        return _mc.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, SwigPyIterator x) -> bool

        1
        """
        return _mc.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _mc.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _mc.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _mc.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t

        1
        """
        return _mc.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _mc.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class stdParameters(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stdParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stdParameters, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        1
        """
        return _mc.stdParameters_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        1
        """
        return _mc.stdParameters___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        1
        """
        return _mc.stdParameters___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type

        1
        """
        return _mc.stdParameters___len__(self)

    def __getitem__(self, *args):
        """
        __getitem__(self, key_type key) -> mapped_type

        1
        """
        return _mc.stdParameters___getitem__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, key_type key)

        1
        """
        return _mc.stdParameters___delitem__(self, *args)

    def has_key(self, *args):
        """
        has_key(self, key_type key) -> bool

        1
        """
        return _mc.stdParameters_has_key(self, *args)

    def keys(self):
        """
        keys(self) -> PyObject

        1
        """
        return _mc.stdParameters_keys(self)

    def values(self):
        """
        values(self) -> PyObject

        1
        """
        return _mc.stdParameters_values(self)

    def items(self):
        """
        items(self) -> PyObject

        1
        """
        return _mc.stdParameters_items(self)

    def __contains__(self, *args):
        """
        __contains__(self, key_type key) -> bool

        1
        """
        return _mc.stdParameters___contains__(self, *args)

    def key_iterator(self):
        """
        key_iterator(self) -> SwigPyIterator

        1
        """
        return _mc.stdParameters_key_iterator(self)

    def value_iterator(self):
        """
        value_iterator(self) -> SwigPyIterator

        1
        """
        return _mc.stdParameters_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """
        __setitem__(self, key_type key, mapped_type x)

        1
        """
        return _mc.stdParameters___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(std::string)> arg0) -> stdParameters
        __init__(self) -> stdParameters
        __init__(self, stdParameters arg0) -> stdParameters

        1
        """
        this = _mc.new_stdParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _mc.stdParameters_empty(self)

    def size(self):
        """
        size(self) -> size_type

        1
        """
        return _mc.stdParameters_size(self)

    def clear(self):
        """
        clear(self)

        1
        """
        return _mc.stdParameters_clear(self)

    def swap(self, *args):
        """
        swap(self, stdParameters v)

        1
        """
        return _mc.stdParameters_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type

        1
        """
        return _mc.stdParameters_get_allocator(self)

    def begin(self):
        """
        begin(self) -> const_iterator

        1
        """
        return _mc.stdParameters_begin(self)

    def end(self):
        """
        end(self) -> const_iterator

        1
        """
        return _mc.stdParameters_end(self)

    def rbegin(self):
        """
        rbegin(self) -> const_reverse_iterator

        1
        """
        return _mc.stdParameters_rbegin(self)

    def rend(self):
        """
        rend(self) -> const_reverse_iterator

        1
        """
        return _mc.stdParameters_rend(self)

    def count(self, *args):
        """
        count(self, key_type x) -> size_type

        1
        """
        return _mc.stdParameters_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator position)
        erase(self, iterator first, iterator last)

        1
        """
        return _mc.stdParameters_erase(self, *args)

    def find(self, *args):
        """
        find(self, key_type x) -> iterator

        1
        """
        return _mc.stdParameters_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(self, key_type x) -> iterator

        1
        """
        return _mc.stdParameters_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(self, key_type x) -> iterator

        1
        """
        return _mc.stdParameters_upper_bound(self, *args)

    __swig_destroy__ = _mc.delete_stdParameters
    __del__ = lambda self : None;
stdParameters_swigregister = _mc.stdParameters_swigregister
stdParameters_swigregister(stdParameters)

class stdListItems(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stdListItems, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stdListItems, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        1
        """
        return _mc.stdListItems_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        1
        """
        return _mc.stdListItems___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        1
        """
        return _mc.stdListItems___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type

        1
        """
        return _mc.stdListItems___len__(self)

    def pop(self):
        """
        pop(self) -> value_type

        1
        """
        return _mc.stdListItems_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, difference_type i, difference_type j) -> stdListItems

        1
        """
        return _mc.stdListItems___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, stdListItems v)

        1
        """
        return _mc.stdListItems___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, difference_type i, difference_type j)

        1
        """
        return _mc.stdListItems___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)

        1
        """
        return _mc.stdListItems___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> stdListItems
        __getitem__(self, difference_type i) -> value_type

        1
        """
        return _mc.stdListItems___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, stdListItems v)
        __setitem__(self, difference_type i, value_type x)

        1
        """
        return _mc.stdListItems___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, value_type x)

        1
        """
        return _mc.stdListItems_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _mc.stdListItems_empty(self)

    def size(self):
        """
        size(self) -> size_type

        1
        """
        return _mc.stdListItems_size(self)

    def clear(self):
        """
        clear(self)

        1
        """
        return _mc.stdListItems_clear(self)

    def swap(self, *args):
        """
        swap(self, stdListItems v)

        1
        """
        return _mc.stdListItems_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type

        1
        """
        return _mc.stdListItems_get_allocator(self)

    def begin(self):
        """
        begin(self) -> const_iterator

        1
        """
        return _mc.stdListItems_begin(self)

    def end(self):
        """
        end(self) -> const_iterator

        1
        """
        return _mc.stdListItems_end(self)

    def rbegin(self):
        """
        rbegin(self) -> const_reverse_iterator

        1
        """
        return _mc.stdListItems_rbegin(self)

    def rend(self):
        """
        rend(self) -> const_reverse_iterator

        1
        """
        return _mc.stdListItems_rend(self)

    def pop_back(self):
        """
        pop_back(self)

        1
        """
        return _mc.stdListItems_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator

        1
        """
        return _mc.stdListItems_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> stdListItems
        __init__(self, stdListItems arg0) -> stdListItems
        __init__(self, size_type size) -> stdListItems
        __init__(self, size_type size, value_type value) -> stdListItems

        1
        """
        this = _mc.new_stdListItems(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(self, value_type x)

        1
        """
        return _mc.stdListItems_push_back(self, *args)

    def front(self):
        """
        front(self) -> value_type

        1
        """
        return _mc.stdListItems_front(self)

    def back(self):
        """
        back(self) -> value_type

        1
        """
        return _mc.stdListItems_back(self)

    def assign(self, *args):
        """
        assign(self, size_type n, value_type x)

        1
        """
        return _mc.stdListItems_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)

        1
        """
        return _mc.stdListItems_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)

        1
        """
        return _mc.stdListItems_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(self, size_type n)

        1
        """
        return _mc.stdListItems_reserve(self, *args)

    def capacity(self):
        """
        capacity(self) -> size_type

        1
        """
        return _mc.stdListItems_capacity(self)

    __swig_destroy__ = _mc.delete_stdListItems
    __del__ = lambda self : None;
stdListItems_swigregister = _mc.stdListItems_swigregister
stdListItems_swigregister(stdListItems)

class ListItem(_object):
    """
    This class represents an item that is displayed in a user interface
    List or part of a playlist.

    It contains a long site of properties that are common for media items.
    Additional custom properties can be used as well. Most of the
    properties are optional. The required properties are: label, path,
    content type and media type. 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListItem, name)
    __repr__ = _swig_repr
    MEDIA_UNKNOWN = _mc.ListItem_MEDIA_UNKNOWN
    MEDIA_AUDIO_MUSIC = _mc.ListItem_MEDIA_AUDIO_MUSIC
    MEDIA_AUDIO_SPEECH = _mc.ListItem_MEDIA_AUDIO_SPEECH
    MEDIA_AUDIO_RADIO = _mc.ListItem_MEDIA_AUDIO_RADIO
    MEDIA_AUDIO_OTHER = _mc.ListItem_MEDIA_AUDIO_OTHER
    MEDIA_VIDEO_MUSIC_VIDEO = _mc.ListItem_MEDIA_VIDEO_MUSIC_VIDEO
    MEDIA_VIDEO_FEATURE_FILM = _mc.ListItem_MEDIA_VIDEO_FEATURE_FILM
    MEDIA_VIDEO_TRAILER = _mc.ListItem_MEDIA_VIDEO_TRAILER
    MEDIA_VIDEO_EPISODE = _mc.ListItem_MEDIA_VIDEO_EPISODE
    MEDIA_VIDEO_CLIP = _mc.ListItem_MEDIA_VIDEO_CLIP
    MEDIA_VIDEO_OTHER = _mc.ListItem_MEDIA_VIDEO_OTHER
    MEDIA_PICTURE = _mc.ListItem_MEDIA_PICTURE
    MEDIA_FILE = _mc.ListItem_MEDIA_FILE
    def __init__(self, *args): 
        """
        __init__(self, MediaType mediaType = MEDIA_UNKNOWN) -> ListItem
        __init__(self) -> ListItem
        __init__(self, CFileItemPtr item) -> ListItem

        Constructor to create a new list item.

        Parameters:
        -----------

        mediaType:  the type of media that the list item represents. 
        """
        this = _mc.new_ListItem(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetLabel(self, *args):
        """
        SetLabel(self, string label)

        Sets the label. 
        """
        return _mc.ListItem_SetLabel(self, *args)

    def SetLabel2(self, *args):
        """
        SetLabel2(self, string label2)

        Sets label2. 
        """
        return _mc.ListItem_SetLabel2(self, *args)

    def SetPath(self, *args):
        """
        SetPath(self, string path)

        Sets the path.

        It could be either a local file or a URL with the protocols:http://,
        mms:// or flash:// (flash is described in the RSS specification). 
        """
        return _mc.ListItem_SetPath(self, *args)

    def SetContentType(self, *args):
        """
        SetContentType(self, string contentType)

        Sets the content type. 
        """
        return _mc.ListItem_SetContentType(self, *args)

    def SetPauseOnSeek(self, *args):
        """SetPauseOnSeek(self, bool pauseOnSeek)"""
        return _mc.ListItem_SetPauseOnSeek(self, *args)

    def SetTitle(self, *args):
        """
        SetTitle(self, string title)

        Sets the title. 
        """
        return _mc.ListItem_SetTitle(self, *args)

    def SetThumbnail(self, *args):
        """
        SetThumbnail(self, string thumbnail)

        Sets the thumbnail.

        Could be either a local file or a URL with the protocolhttp://. The
        thumbnail will be scaled to 200x200, so it can not be used for
        displaying large images. 
        """
        return _mc.ListItem_SetThumbnail(self, *args)

    def SetIcon(self, *args):
        """
        SetIcon(self, string thumbnail)

        Sets the icon.

        Could be either a local file or a URL with the protocolhttp://. The
        icon will be scaled to 200x200, so it can not be used for displaying
        large images. 
        """
        return _mc.ListItem_SetIcon(self, *args)

    def SetTrackNumber(self, *args):
        """
        SetTrackNumber(self, int trackNumber)

        Sets the track number for audio CDs. 
        """
        return _mc.ListItem_SetTrackNumber(self, *args)

    def SetArtist(self, *args):
        """
        SetArtist(self, string artist)

        Sets the arist name. 
        """
        return _mc.ListItem_SetArtist(self, *args)

    def SetAlbum(self, *args):
        """
        SetAlbum(self, string album)

        Sets the album name. 
        """
        return _mc.ListItem_SetAlbum(self, *args)

    def SetYear(self, *args):
        """
        SetYear(self, int year)

        Sets the release year. 
        """
        return _mc.ListItem_SetYear(self, *args)

    def SetDate(self, *args):
        """
        SetDate(self, int year, int month, int day)

        Sets the release date. 
        """
        return _mc.ListItem_SetDate(self, *args)

    def SetGenre(self, *args):
        """
        SetGenre(self, string genre)

        Sets the genre. 
        """
        return _mc.ListItem_SetGenre(self, *args)

    def SetDirector(self, *args):
        """
        SetDirector(self, string director)

        Sets the director for video media. 
        """
        return _mc.ListItem_SetDirector(self, *args)

    def SetSize(self, *args):
        """
        SetSize(self, long long size)

        Sets the file size. 
        """
        return _mc.ListItem_SetSize(self, *args)

    def SetDuration(self, *args):
        """
        SetDuration(self, int seconds)

        Sets the duration in seconds. 
        """
        return _mc.ListItem_SetDuration(self, *args)

    def SetStarRating(self, *args):
        """
        SetStarRating(self, float rating)

        Sets the star rating for the content.

        Should be a value between 0 and 10. 
        """
        return _mc.ListItem_SetStarRating(self, *args)

    def SetViewCount(self, *args):
        """
        SetViewCount(self, int viewCount)

        Sets the number of views. 
        """
        return _mc.ListItem_SetViewCount(self, *args)

    def SetContentRating(self, *args):
        """
        SetContentRating(self, string rating)

        Sets the content rating (MPAA, TV). 
        """
        return _mc.ListItem_SetContentRating(self, *args)

    def SetDescription(self, *args):
        """
        SetDescription(self, string plotOutline, bool isHTML = False)
        SetDescription(self, string plotOutline)

        Sets the description. 
        """
        return _mc.ListItem_SetDescription(self, *args)

    def SetEpisode(self, *args):
        """
        SetEpisode(self, int episode)

        Sets the episode number for TV show. 
        """
        return _mc.ListItem_SetEpisode(self, *args)

    def SetSeason(self, *args):
        """
        SetSeason(self, int season)

        Sets the season number for TV show. 
        """
        return _mc.ListItem_SetSeason(self, *args)

    def SetTVShowTitle(self, *args):
        """
        SetTVShowTitle(self, string title)

        Sets the TV show title (different than the title which is the episode
        title) 
        """
        return _mc.ListItem_SetTVShowTitle(self, *args)

    def SetComment(self, *args):
        """
        SetComment(self, string comment)

        Sets the comment. 
        """
        return _mc.ListItem_SetComment(self, *args)

    def SetStudio(self, *args):
        """
        SetStudio(self, string studio)

        Sets the studio or network. 
        """
        return _mc.ListItem_SetStudio(self, *args)

    def SetAuthor(self, *args):
        """
        SetAuthor(self, string author)

        Sets the author. 
        """
        return _mc.ListItem_SetAuthor(self, *args)

    def AddCastAndRole(self, *args):
        """
        AddCastAndRole(self, string name, string role)

        Adds a cast with role to the list of cast. 
        """
        return _mc.ListItem_AddCastAndRole(self, *args)

    def AddCast(self, *args):
        """
        AddCast(self, string name)

        Adds a cast to the list of cat. 
        """
        return _mc.ListItem_AddCast(self, *args)

    def ClearCastAndRole(self):
        """
        ClearCastAndRole(self)

        Clears the list of cast. 
        """
        return _mc.ListItem_ClearCastAndRole(self)

    def SetWriter(self, *args):
        """
        SetWriter(self, string write)

        Sets the writer. 
        """
        return _mc.ListItem_SetWriter(self, *args)

    def SetTagLine(self, *args):
        """
        SetTagLine(self, string tagLine)

        Sets the tag line. 
        """
        return _mc.ListItem_SetTagLine(self, *args)

    def SetProviderSource(self, *args):
        """
        SetProviderSource(self, string provider)

        Sets the provider source.

        This should be the web site name (e.g. CBS.com). This is used when an
        item is played from the feed, so the user will see "Play on
        <provider-name" 
        """
        return _mc.ListItem_SetProviderSource(self, *args)

    def SetKeywords(self, *args):
        """
        SetKeywords(self, string keywords)

        Sets the key words. 
        """
        return _mc.ListItem_SetKeywords(self, *args)

    def SetImage(self, *args):
        """
        SetImage(self, int id, string url)

        Sets additional (non thumbnail) image.

        This image is not scaled and loaded in the background. There could be
        up to 10 images per item.

        Parameters:
        -----------

        id:  id of the image between 0 and 9

        url:  url of the image. protocol should behttp:// 
        """
        return _mc.ListItem_SetImage(self, *args)

    def AddAlternativePath(self, *args):
        """
        AddAlternativePath(self, string label, string path, string contentType, string thumbUrl)

        Adds an altenative path for playing the media.

        When the user clicks on the item, additional Play options will be
        listed. This is useful to supporting playback of both SD and HD
        content.

        Parameters:
        -----------

        label:  the label that will appear in the action menu (for example,
        Play HD)

        path:  the path of media file. could be either a local file or a URL
        of protocols:http://, mms:// or flash://

        contentType:  the content type of the media

        thumbUrl:  the thumbnail that will be displayed next to the label 
        """
        return _mc.ListItem_AddAlternativePath(self, *args)

    def SetProperty(self, *args):
        """
        SetProperty(self, string key, string value)

        Sets custom properties to the item.

        Parameters:
        -----------

        key:  the key name for the property

        value:  the value of the property 
        """
        return _mc.ListItem_SetProperty(self, *args)

    def ClearProperty(self, *args):
        """
        ClearProperty(self, string strKey)

        Clears custom properties from item.

        Parameters:
        -----------

        key:  the key name for the property 
        """
        return _mc.ListItem_ClearProperty(self, *args)

    def SetReportToServer(self, *args):
        """
        SetReportToServer(self, bool reportToServer)

        Boolean flag that defines whether boxee will report to the server that
        this item was played.

        By default every played content is reported to boxee. If the played
        content is inappropriate, it should not be reported to boxee. 
        """
        return _mc.ListItem_SetReportToServer(self, *args)

    def SetResumable(self, *args):
        """
        SetResumable(self, bool resumable)

        Boolean flag which determines whether the item can be resumed from
        last stopped position. 
        """
        return _mc.ListItem_SetResumable(self, *args)

    def SetAddToHistory(self, *args):
        """
        SetAddToHistory(self, bool addToHistory)

        Boolean flag that defines whether boxee will add this list item to the
        history when it is played.

        By default items are not added to history. If the played content is
        inappropriate, it should not be added to history. 
        """
        return _mc.ListItem_SetAddToHistory(self, *args)

    def SetEnableRecommend(self, *args):
        """
        SetEnableRecommend(self, bool enabled)

        Boolean flag that enables/disables the recommend action in the boxee
        client.

        By default the recommend action is enabled. 
        """
        return _mc.ListItem_SetEnableRecommend(self, *args)

    def SetEnableRate(self, *args):
        """
        SetEnableRate(self, bool enabled)

        Boolean flag that enables/disables the rate (like/dislike) action in
        the boxee client.

        By default the recommend action is enabled. 
        """
        return _mc.ListItem_SetEnableRate(self, *args)

    def SetExternalItem(self, *args):
        """
        SetExternalItem(self, ListItem externalItem)

        In some (rare) cases you would like the application to play this item
        but when reporting to the server or updating the history, you would
        like to use another list item.

        In that case, create another list item and set it to be the external
        item of this one. 
        """
        return _mc.ListItem_SetExternalItem(self, *args)

    def SetCanShuffle(self, *args):
        """SetCanShuffle(self, bool canShuffle)"""
        return _mc.ListItem_SetCanShuffle(self, *args)

    def SetCanRepeat(self, *args):
        """SetCanRepeat(self, bool canRepeat)"""
        return _mc.ListItem_SetCanRepeat(self, *args)

    def Select(self, *args):
        """
        Select(self, bool on)

        Marks item state as selected, this flag is usually used by the UI to
        highlight marked items in the list. 
        """
        return _mc.ListItem_Select(self, *args)

    def GetMediaType(self):
        """
        GetMediaType(self) -> MediaType

        Get the media type. 
        """
        return _mc.ListItem_GetMediaType(self)

    def GetLabel(self):
        """
        GetLabel(self) -> string

        Returns the label. 
        """
        return _mc.ListItem_GetLabel(self)

    def GetContentType(self):
        """
        GetContentType(self) -> string

        Returns the content tyep. 
        """
        return _mc.ListItem_GetContentType(self)

    def GetPath(self):
        """
        GetPath(self) -> string

        Returns the path. 
        """
        return _mc.ListItem_GetPath(self)

    def GetTitle(self):
        """
        GetTitle(self) -> string

        Returns the title. 
        """
        return _mc.ListItem_GetTitle(self)

    def GetThumbnail(self):
        """
        GetThumbnail(self) -> string

        Returns the thumbnail. 
        """
        return _mc.ListItem_GetThumbnail(self)

    def GetIcon(self):
        """
        GetIcon(self) -> string

        Returns the icon. 
        """
        return _mc.ListItem_GetIcon(self)

    def GetTrackNumber(self):
        """
        GetTrackNumber(self) -> int

        Returns the track number. 
        """
        return _mc.ListItem_GetTrackNumber(self)

    def GetArtist(self):
        """
        GetArtist(self) -> string

        Returns the artist. 
        """
        return _mc.ListItem_GetArtist(self)

    def GetAlbum(self):
        """
        GetAlbum(self) -> string

        Returns the album. 
        """
        return _mc.ListItem_GetAlbum(self)

    def GetYear(self):
        """
        GetYear(self) -> int

        Returns the release year. 
        """
        return _mc.ListItem_GetYear(self)

    def GetDate(self):
        """
        GetDate(self) -> string

        Returns the release date. 
        """
        return _mc.ListItem_GetDate(self)

    def GetGenre(self):
        """
        GetGenre(self) -> string

        Returns the genre. 
        """
        return _mc.ListItem_GetGenre(self)

    def GetDirector(self):
        """
        GetDirector(self) -> string

        Returns the director. 
        """
        return _mc.ListItem_GetDirector(self)

    def GetSize(self):
        """
        GetSize(self) -> int

        Returns the size. 
        """
        return _mc.ListItem_GetSize(self)

    def GetSizeFormatted(self):
        """
        GetSizeFormatted(self) -> string

        Returns the size, formatted with commas. 
        """
        return _mc.ListItem_GetSizeFormatted(self)

    def GetDuration(self):
        """
        GetDuration(self) -> int

        Returns the duration in seconds. 
        """
        return _mc.ListItem_GetDuration(self)

    def GetDurationFormatted(self):
        """
        GetDurationFormatted(self) -> string

        Returns the duration formatted as HH:MM:SS. 
        """
        return _mc.ListItem_GetDurationFormatted(self)

    def GetStarRating(self):
        """
        GetStarRating(self) -> float

        Returns the star rating. 
        """
        return _mc.ListItem_GetStarRating(self)

    def GetViewCount(self):
        """
        GetViewCount(self) -> int

        Rerturns the view count. 
        """
        return _mc.ListItem_GetViewCount(self)

    def GetViewCountFormatted(self):
        """
        GetViewCountFormatted(self) -> string

        Rerturns the view count formatted with commas,. 
        """
        return _mc.ListItem_GetViewCountFormatted(self)

    def GetContentRating(self):
        """
        GetContentRating(self) -> string

        Returns the content rating. 
        """
        return _mc.ListItem_GetContentRating(self)

    def GetDescription(self):
        """
        GetDescription(self) -> string

        Returns the description. 
        """
        return _mc.ListItem_GetDescription(self)

    def GetEpisode(self):
        """
        GetEpisode(self) -> int

        Returns the episode number for tv shows. 
        """
        return _mc.ListItem_GetEpisode(self)

    def GetSeason(self):
        """
        GetSeason(self) -> int

        Returns the season number for tv shows. 
        """
        return _mc.ListItem_GetSeason(self)

    def GetTVShowTitle(self):
        """
        GetTVShowTitle(self) -> string

        Returns the tv show title. 
        """
        return _mc.ListItem_GetTVShowTitle(self)

    def GetComment(self):
        """
        GetComment(self) -> string

        Returns the comment. 
        """
        return _mc.ListItem_GetComment(self)

    def GetStudio(self):
        """
        GetStudio(self) -> string

        Returns the studio. 
        """
        return _mc.ListItem_GetStudio(self)

    def GetAuthor(self):
        """
        GetAuthor(self) -> string

        Returns the author. 
        """
        return _mc.ListItem_GetAuthor(self)

    def GetCastAndRole(self):
        """
        GetCastAndRole(self) -> string

        Returns the cast and role. 
        """
        return _mc.ListItem_GetCastAndRole(self)

    def GetCast(self):
        """
        GetCast(self) -> string

        Returns the cast. 
        """
        return _mc.ListItem_GetCast(self)

    def GetWriter(self):
        """
        GetWriter(self) -> string

        Returns the writer. 
        """
        return _mc.ListItem_GetWriter(self)

    def GetTagLine(self):
        """
        GetTagLine(self) -> string

        Returns the tag line. 
        """
        return _mc.ListItem_GetTagLine(self)

    def GetProviderSource(self):
        """
        GetProviderSource(self) -> string

        Returns the provider source. 
        """
        return _mc.ListItem_GetProviderSource(self)

    def GetKeywords(self):
        """
        GetKeywords(self) -> string

        Returns the keywords. 
        """
        return _mc.ListItem_GetKeywords(self)

    def GetProperty(self, *args):
        """
        GetProperty(self, string key) -> string

        Returns a custom property. 
        """
        return _mc.ListItem_GetProperty(self, *args)

    def HasProperty(self, *args):
        """
        HasProperty(self, string key) -> bool

        Returns true if the property exist.

        Since: 0.9.12 
        """
        return _mc.ListItem_HasProperty(self, *args)

    def GetReportToServer(self):
        """
        GetReportToServer(self) -> bool

        Returns true if playing the item will be reported to boxee. 
        """
        return _mc.ListItem_GetReportToServer(self)

    def GetResumable(self):
        """
        GetResumable(self) -> bool

        Returns true if item can be resumed from last stopped position. 
        """
        return _mc.ListItem_GetResumable(self)

    def GetWatched(self):
        """
        GetWatched(self) -> bool

        Returns true if item is marked as watched in the boxee client and
        false otherwise. 
        """
        return _mc.ListItem_GetWatched(self)

    def IsEnabledRecommend(self):
        """
        IsEnabledRecommend(self) -> bool

        Returns a boolean flag whether the recommend action is
        enabled/disabled in the boxee client. 
        """
        return _mc.ListItem_IsEnabledRecommend(self)

    def IsEnabledRate(self):
        """
        IsEnabledRate(self) -> bool

        Returns a boolean flag whether the rate action is (like/dislike)
        enabled/disabled in the boxee client. 
        """
        return _mc.ListItem_IsEnabledRate(self)

    def GetImage(self, *args):
        """
        GetImage(self, int id) -> string

        Gets additional (non thumbnail) image attached to the list item via
        SetImage(). 
        """
        return _mc.ListItem_GetImage(self, *args)

    def Dump(self):
        """
        Dump(self)

        Dumps the content of the list item to the boxee log.

        This is useful for debugging purposes. 
        """
        return _mc.ListItem_Dump(self)

    def SetMusicOSDButton(self, *args):
        """
        SetMusicOSDButton(self, int id, string thumbFocus, string thumbNoFocus)

        1
        """
        return _mc.ListItem_SetMusicOSDButton(self, *args)

    def DeleteMusicOSDButton(self, *args):
        """
        DeleteMusicOSDButton(self, int id)

        1
        """
        return _mc.ListItem_DeleteMusicOSDButton(self, *args)

    def GetFileItem(self):
        """
        GetFileItem(self) -> CFileItemPtr

        1
        """
        return _mc.ListItem_GetFileItem(self)

    def SetArbitratyProperty(self, *args):
        """
        SetArbitratyProperty(self, string key, void value)

        1
        """
        return _mc.ListItem_SetArbitratyProperty(self, *args)

    def GetArbitratyProperty(self, *args):
        """
        GetArbitratyProperty(self, string key) -> void

        1
        """
        return _mc.ListItem_GetArbitratyProperty(self, *args)

    __swig_destroy__ = _mc.delete_ListItem
    __del__ = lambda self : None;
ListItem_swigregister = _mc.ListItem_swigregister
ListItem_swigregister(ListItem)

class ListItems(stdListItems):
    """
    This class represents a list of ListItem.

    Should be used as a python array. Use append(), remove() etc. 
    """
    __swig_setmethods__ = {}
    for _s in [stdListItems]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListItems, name, value)
    __swig_getmethods__ = {}
    for _s in [stdListItems]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListItems, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> ListItems

        1
        """
        this = _mc.new_ListItems()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mc.delete_ListItems
    __del__ = lambda self : None;
ListItems_swigregister = _mc.ListItems_swigregister
ListItems_swigregister(ListItems)

class ActionEvent(_object):
    """Proxy of C++ XAPP::ActionEvent class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActionEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ActionEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["windowId"] = _mc.ActionEvent_windowId_set
    __swig_getmethods__["windowId"] = _mc.ActionEvent_windowId_get
    if _newclass:windowId = _swig_property(_mc.ActionEvent_windowId_get, _mc.ActionEvent_windowId_set)
    __swig_setmethods__["controlId"] = _mc.ActionEvent_controlId_set
    __swig_getmethods__["controlId"] = _mc.ActionEvent_controlId_get
    if _newclass:controlId = _swig_property(_mc.ActionEvent_controlId_get, _mc.ActionEvent_controlId_set)
    def __init__(self): 
        """
        __init__(self) -> ActionEvent

        1
        """
        this = _mc.new_ActionEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mc.delete_ActionEvent
    __del__ = lambda self : None;
ActionEvent_swigregister = _mc.ActionEvent_swigregister
ActionEvent_swigregister(ActionEvent)

class ActionListener(_object):
    """Proxy of C++ XAPP::ActionListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActionListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ActionListener, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mc.delete_ActionListener
    __del__ = lambda self : None;
    def ActionPerformed(self, *args):
        """ActionPerformed(self, ActionEvent e) -> bool"""
        return _mc.ActionListener_ActionPerformed(self, *args)

ActionListener_swigregister = _mc.ActionListener_swigregister
ActionListener_swigregister(ActionListener)

class Control(_object):
    """
    Represents a control in the user interface.

    Get the Control object by calling GetControl() on the Window. 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Control, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Control, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int windowId, int controlId) -> Control

        1
        """
        this = _mc.new_Control(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mc.delete_Control
    __del__ = lambda self : None;
    def SetFocus(self):
        """
        SetFocus(self)

        Requests a focus on the control. 
        """
        return _mc.Control_SetFocus(self)

    def HasFocus(self):
        """
        HasFocus(self) -> bool

        Returns true if the control holds the focus. 
        """
        return _mc.Control_HasFocus(self)

    def SetVisible(self, *args):
        """
        SetVisible(self, bool visible)

        Changes the visibility of the control.

        Parameters:
        -----------

        visible:  true to make the control visible. false otherwise. 
        """
        return _mc.Control_SetVisible(self, *args)

    def IsVisible(self):
        """
        IsVisible(self) -> bool

        Returns true if the control is visible. 
        """
        return _mc.Control_IsVisible(self)

    def SetEnabled(self, *args):
        """
        SetEnabled(self, bool enabled)

        Sets whether the control is enabled.

        Controls which are not enabled cannot be focused.

        Parameters:
        -----------

        enabled:  true to make the control enabled. false otherwise. 
        """
        return _mc.Control_SetEnabled(self, *args)

    def IsEnabled(self):
        """
        IsEnabled(self) -> bool

        Returns true if the control is enabled. 
        """
        return _mc.Control_IsEnabled(self)

    def GetWindowId(self):
        """
        GetWindowId(self) -> int

        Get window id. 
        """
        return _mc.Control_GetWindowId(self)

    def GetControlId(self):
        """
        GetControlId(self) -> int

        Get window id. 
        """
        return _mc.Control_GetControlId(self)

    def AddActionListener(self, *args):
        """
        AddActionListener(self, ActionListener listener)

        1
        """
        return _mc.Control_AddActionListener(self, *args)

    def RemoveActionListener(self, *args):
        """
        RemoveActionListener(self, ActionListener listener)

        1
        """
        return _mc.Control_RemoveActionListener(self, *args)

Control_swigregister = _mc.Control_swigregister
Control_swigregister(Control)

class Button(Control):
    """
    Represents a button control in the user interface.

    Get the Button object by calling GetButton() on the Window. 
    """
    __swig_setmethods__ = {}
    for _s in [Control]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Button, name, value)
    __swig_getmethods__ = {}
    for _s in [Control]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Button, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int windowId, int controlId) -> Button

        1
        """
        this = _mc.new_Button(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetLabel(self, *args):
        """
        SetLabel(self, string label)

        Set the label of the button.

        Parameters:
        -----------

        label:  the label of the button 
        """
        return _mc.Button_SetLabel(self, *args)

    def GetLabel(self):
        """
        GetLabel(self) -> string

        Get button label.

        the label of the button 
        """
        return _mc.Button_GetLabel(self)

    __swig_destroy__ = _mc.delete_Button
    __del__ = lambda self : None;
Button_swigregister = _mc.Button_swigregister
Button_swigregister(Button)

class Edit(Control):
    """
    Represents an edit control in the user interface.

    Get the Edit object by calling GetEdit() on the Window. 
    """
    __swig_setmethods__ = {}
    for _s in [Control]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Edit, name, value)
    __swig_getmethods__ = {}
    for _s in [Control]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Edit, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int windowId, int controlId) -> Edit

        1
        """
        this = _mc.new_Edit(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetText(self, *args):
        """
        SetText(self, string text)

        Sets the text of the edit control.

        Parameters:
        -----------

        text:  the text of the edit control 
        """
        return _mc.Edit_SetText(self, *args)

    def GetText(self):
        """
        GetText(self) -> string

        Gets the text of the edit control. 
        """
        return _mc.Edit_GetText(self)

    __swig_destroy__ = _mc.delete_Edit
    __del__ = lambda self : None;
Edit_swigregister = _mc.Edit_swigregister
Edit_swigregister(Edit)

class Image(Control):
    """
    Represents an image control in the user interface.

    Get the Image object by calling GetImage() on the Window. 
    """
    __swig_setmethods__ = {}
    for _s in [Control]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    for _s in [Control]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int windowId, int controlId) -> Image

        1
        """
        this = _mc.new_Image(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetTexture(self, *args):
        """
        SetTexture(self, string imagePath)

        Set the texture of the image.

        Parameters:
        -----------

        imagePath:  the full path where the image resides. Should be a local
        file only. Supported formats: PNG, GIF, JPG. 
        """
        return _mc.Image_SetTexture(self, *args)

    __swig_destroy__ = _mc.delete_Image
    __del__ = lambda self : None;
Image_swigregister = _mc.Image_swigregister
Image_swigregister(Image)

class Label(Control):
    """
    Represents a label control in the user interface.

    Get the Label object by calling GetLabel() on the Window. 
    """
    __swig_setmethods__ = {}
    for _s in [Control]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Label, name, value)
    __swig_getmethods__ = {}
    for _s in [Control]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Label, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int windowId, int controlId) -> Label

        1
        """
        this = _mc.new_Label(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetLabel(self, *args):
        """
        SetLabel(self, string label)

        Set the label text.

        Parameters:
        -----------

        label:  the text of the label 
        """
        return _mc.Label_SetLabel(self, *args)

    def GetLabel(self):
        """
        GetLabel(self) -> string

        Returns the value of the label. 
        """
        return _mc.Label_GetLabel(self)

    __swig_destroy__ = _mc.delete_Label
    __del__ = lambda self : None;
Label_swigregister = _mc.Label_swigregister
Label_swigregister(Label)

class Textbox(Control):
    """Proxy of C++ XAPP::Textbox class"""
    __swig_setmethods__ = {}
    for _s in [Control]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Textbox, name, value)
    __swig_getmethods__ = {}
    for _s in [Control]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Textbox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int windowId, int controlId) -> Textbox

        1
        """
        this = _mc.new_Textbox(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetText(self, *args):
        """SetText(self, string text)"""
        return _mc.Textbox_SetText(self, *args)

    __swig_destroy__ = _mc.delete_Textbox
    __del__ = lambda self : None;
Textbox_swigregister = _mc.Textbox_swigregister
Textbox_swigregister(Textbox)

class List(Control):
    """
    Represents a list control in the user interface.

    Get the List object by calling GetList() on the Window. 
    """
    __swig_setmethods__ = {}
    for _s in [Control]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, List, name, value)
    __swig_getmethods__ = {}
    for _s in [Control]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, List, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int windowId, int controlId) -> List

        1
        """
        this = _mc.new_List(*args)
        try: self.this.append(this)
        except: self.this = this
    def ScrollPageUp(self):
        """
        ScrollPageUp(self)

        Scrolls the list one page up for vertical lists or left for horizontal
        lists. 
        """
        return _mc.List_ScrollPageUp(self)

    def ScrollPageDown(self):
        """
        ScrollPageDown(self)

        Scrolls the list one page down for vertical lists or right for
        horizontal lists. 
        """
        return _mc.List_ScrollPageDown(self)

    def Refresh(self):
        """
        Refresh(self)

        Refreshes the contents of the list. 
        """
        return _mc.List_Refresh(self)

    def SetContentURL(self, *args):
        """
        SetContentURL(self, string url)

        Sets the list with items from an RSS feed.

        Please see the RSS specification for supported RSS formats.

        Parameters:
        -----------

        url:  url of the RSS. Should have and rss:// scheme. 
        """
        return _mc.List_SetContentURL(self, *args)

    def SetFocusedItem(self, *args):
        """
        SetFocusedItem(self, int item)

        Focuses a specific item in the list.

        Only one item can be focused in the list.

        Parameters:
        -----------

        item:  index of item in the list that should be focused 
        """
        return _mc.List_SetFocusedItem(self, *args)

    def SetSelected(self, *args):
        """
        SetSelected(self, int item, bool selected)

        Selects/unselects an item in the list.

        Single/multiple selection is defined in the skin.

        Parameters:
        -----------

        item:  index of item in the list that should be selected/unselected

        selected:  true to select the item, false to unselect 
        """
        return _mc.List_SetSelected(self, *args)

    def SelectAll(self):
        """
        SelectAll(self)

        Selects all the items in the list. 
        """
        return _mc.List_SelectAll(self)

    def UnselectAll(self):
        """
        UnselectAll(self)

        Unselect all the items in the list. 
        """
        return _mc.List_UnselectAll(self)

    def GetSelected(self):
        """
        GetSelected(self) -> ListItems

        Returns all the selected items in the list. 
        """
        return _mc.List_GetSelected(self)

    def GetFocusedItem(self):
        """
        GetFocusedItem(self) -> int

        Returns the index of the focused item in the list.

        Throws an exception if no item is focused. 
        """
        return _mc.List_GetFocusedItem(self)

    def IsSelected(self, *args):
        """
        IsSelected(self, int itemIndex) -> bool

        Returns true if the item with specified index.

        Parameters:
        -----------

        itemIndex:  - index of the item 
        """
        return _mc.List_IsSelected(self, *args)

    def GetItem(self, *args):
        """
        GetItem(self, int item) -> ListItem

        Returns a specific item in the list.

        Throws an exception if the item does not exist. 
        """
        return _mc.List_GetItem(self, *args)

    def GetItems(self):
        """
        GetItems(self) -> ListItems

        Returns all the items in the list. 
        """
        return _mc.List_GetItems(self)

    def SetItems(self, *args):
        """
        SetItems(self, ListItems list, int iSelectedItem = -1)
        SetItems(self, ListItems list)

        Loads the list with items.

        Parameters:
        -----------

        list:  items to be set in the list. 
        """
        return _mc.List_SetItems(self, *args)

    def JumpToLetter(self, *args):
        """
        JumpToLetter(self, char letter)

        Moves the focus in the list to the first item with the specified
        letter.

        Parameters:
        -----------

        letter:  the letter to jump to. 
        """
        return _mc.List_JumpToLetter(self, *args)

    def UpdateItem(self, *args):
        """
        UpdateItem(self, int index, ListItem item)

        Updates an existing item.

        Parameters:
        -----------

        item:  to be set in the list. 
        """
        return _mc.List_UpdateItem(self, *args)

    __swig_destroy__ = _mc.delete_List
    __del__ = lambda self : None;
List_swigregister = _mc.List_swigregister
List_swigregister(List)

class LocalConfig(_object):
    """
    Represents the storage of local configuration for an application.

    Local means that it is stored in the client (in the future there might
    be server side configuration). Get the LocalConfig object by calling
    GetLocalConfig() on the App object. Configuration is stored in a
    key/value manner. A key may have multiple values. 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocalConfig, name)
    __repr__ = _swig_repr
    def SetValue(self, *args):
        """
        SetValue(self, string key, string value)

        Sets and stores a value in the configuraion file.

        Parameters:
        -----------

        key:  the key identifier of the value to store

        value:  the actual value to store 
        """
        return _mc.LocalConfig_SetValue(self, *args)

    def GetValue(self, *args):
        """
        GetValue(self, string key) -> string

        Retrieves a value from the configuration file.

        If the key has multiple values, you can specify the index of the of
        key between curly brackets. For example, if the key "friends" has
        multiple values, you can retreive the 5th element by requesting key:
        friend{4}

        Parameters:
        -----------

        key:  the key identifier of the value to retrieve 
        """
        return _mc.LocalConfig_GetValue(self, *args)

    def Reset(self, *args):
        """
        Reset(self, string key)

        Resets and deletes a value from the configuration file.

        Parameters:
        -----------

        key:  the key identifier of the value to reset 
        """
        return _mc.LocalConfig_Reset(self, *args)

    def ResetAll(self):
        """
        ResetAll(self)

        Resets and deletes all values from the configuration file. 
        """
        return _mc.LocalConfig_ResetAll(self)

    def PushBackValue(self, *args):
        """
        PushBackValue(self, string key, string value, int limit = 0)
        PushBackValue(self, string key, string value)

        Adds value to a key.

        Add the value to the back of the list of values.

        Parameters:
        -----------

        key:  the key identifier of the value to store

        value:  the actual value to store

        limit:  maximum number of values allowed for this key. if the number
        is passed, values will be chopped from the front. 
        """
        return _mc.LocalConfig_PushBackValue(self, *args)

    def PushFrontValue(self, *args):
        """
        PushFrontValue(self, string key, string value, int limit = 0)
        PushFrontValue(self, string key, string value)

        Adds value to a key.

        Add the value to the front of the list of values.

        Parameters:
        -----------

        key:  the key identifier of the value to store

        value:  the actual value to store

        limit:  maximum number of values allowed for this key. if the number
        is passed, values will be chopped from the back. 
        """
        return _mc.LocalConfig_PushFrontValue(self, *args)

    def Implode(self, *args):
        """
        Implode(self, string glue, string key) -> string

        Imploes all the values of a key to a single string, glued together.

        Parameters:
        -----------

        glue:  the glue string between values

        key:  the key identifier of the value to retrieve 
        """
        return _mc.LocalConfig_Implode(self, *args)

    def __init__(self): 
        """
        __init__(self) -> LocalConfig

        1
        """
        this = _mc.new_LocalConfig()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mc.delete_LocalConfig
    __del__ = lambda self : None;
LocalConfig_swigregister = _mc.LocalConfig_swigregister
LocalConfig_swigregister(LocalConfig)

class ToggleButton(Control):
    """
    Represents a toggle button control in the user interface.

    Get the ToggleButton object by calling GetToggleButton() on the
    Window. 
    """
    __swig_setmethods__ = {}
    for _s in [Control]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToggleButton, name, value)
    __swig_getmethods__ = {}
    for _s in [Control]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ToggleButton, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int windowId, int controlId) -> ToggleButton

        1
        """
        this = _mc.new_ToggleButton(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetLabel(self, *args):
        """
        SetLabel(self, string label)

        Set the label of the button.

        Parameters:
        -----------

        label:  the label of the button 
        """
        return _mc.ToggleButton_SetLabel(self, *args)

    def SetSelected(self, *args):
        """
        SetSelected(self, bool selected)

        Mark the toggle button as selected/unselected.

        Parameters:
        -----------

        selected:  true to select the toggle button, false for unselected 
        """
        return _mc.ToggleButton_SetSelected(self, *args)

    def IsSelected(self):
        """
        IsSelected(self) -> bool

        Returns true if the toggle button is selected, false otherwise. 
        """
        return _mc.ToggleButton_IsSelected(self)

    __swig_destroy__ = _mc.delete_ToggleButton
    __del__ = lambda self : None;
ToggleButton_swigregister = _mc.ToggleButton_swigregister
ToggleButton_swigregister(ToggleButton)

class WindowEvent(_object):
    """Proxy of C++ XAPP::WindowEvent class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WindowEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WindowEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["windowId"] = _mc.WindowEvent_windowId_set
    __swig_getmethods__["windowId"] = _mc.WindowEvent_windowId_get
    if _newclass:windowId = _swig_property(_mc.WindowEvent_windowId_get, _mc.WindowEvent_windowId_set)
    def __init__(self): 
        """
        __init__(self) -> WindowEvent

        1
        """
        this = _mc.new_WindowEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mc.delete_WindowEvent
    __del__ = lambda self : None;
WindowEvent_swigregister = _mc.WindowEvent_swigregister
WindowEvent_swigregister(WindowEvent)

class WindowListener(_object):
    """Proxy of C++ XAPP::WindowListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WindowListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WindowListener, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mc.delete_WindowListener
    __del__ = lambda self : None;
    def WindowOpening(self, *args):
        """WindowOpening(self, WindowEvent e)"""
        return _mc.WindowListener_WindowOpening(self, *args)

    def WindowOpened(self, *args):
        """WindowOpened(self, WindowEvent e)"""
        return _mc.WindowListener_WindowOpened(self, *args)

    def WindowClosing(self, *args):
        """WindowClosing(self, WindowEvent e)"""
        return _mc.WindowListener_WindowClosing(self, *args)

    def WindowClosed(self, *args):
        """WindowClosed(self, WindowEvent e)"""
        return _mc.WindowListener_WindowClosed(self, *args)

    def WindowRender(self, *args):
        """WindowRender(self, WindowEvent e)"""
        return _mc.WindowListener_WindowRender(self, *args)

WindowListener_swigregister = _mc.WindowListener_swigregister
WindowListener_swigregister(WindowListener)

class KeyEvent(_object):
    """Proxy of C++ XAPP::KeyEvent class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KeyEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["windowId"] = _mc.KeyEvent_windowId_set
    __swig_getmethods__["windowId"] = _mc.KeyEvent_windowId_get
    if _newclass:windowId = _swig_property(_mc.KeyEvent_windowId_get, _mc.KeyEvent_windowId_set)
    XAPP_KEY_SELECT = _mc.KeyEvent_XAPP_KEY_SELECT
    XAPP_KEY_BACK = _mc.KeyEvent_XAPP_KEY_BACK
    XAPP_KEY_LEFT = _mc.KeyEvent_XAPP_KEY_LEFT
    XAPP_KEY_RIGHT = _mc.KeyEvent_XAPP_KEY_RIGHT
    XAPP_KEY_UP = _mc.KeyEvent_XAPP_KEY_UP
    XAPP_KEY_DOWN = _mc.KeyEvent_XAPP_KEY_DOWN
    XAPP_KEY_UNICODE = _mc.KeyEvent_XAPP_KEY_UNICODE
    __swig_setmethods__["key"] = _mc.KeyEvent_key_set
    __swig_getmethods__["key"] = _mc.KeyEvent_key_get
    if _newclass:key = _swig_property(_mc.KeyEvent_key_get, _mc.KeyEvent_key_set)
    __swig_setmethods__["unicode"] = _mc.KeyEvent_unicode_set
    __swig_getmethods__["unicode"] = _mc.KeyEvent_unicode_get
    if _newclass:unicode = _swig_property(_mc.KeyEvent_unicode_get, _mc.KeyEvent_unicode_set)
    def __init__(self): 
        """
        __init__(self) -> KeyEvent

        1
        """
        this = _mc.new_KeyEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mc.delete_KeyEvent
    __del__ = lambda self : None;
KeyEvent_swigregister = _mc.KeyEvent_swigregister
KeyEvent_swigregister(KeyEvent)

class KeyListener(_object):
    """Proxy of C++ XAPP::KeyListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KeyListener, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mc.delete_KeyListener
    __del__ = lambda self : None;
    def KeyPressed(self, *args):
        """KeyPressed(self, KeyEvent e) -> bool"""
        return _mc.KeyListener_KeyPressed(self, *args)

KeyListener_swigregister = _mc.KeyListener_swigregister
KeyListener_swigregister(KeyListener)

class Window(_object):
    """
    Represents a toggle button control in the user interface.

    Get the Window object by calling GetActiveWindow() or GetWindow()
    functions. 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Window, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Window, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int id) -> Window

        1
        """
        this = _mc.new_Window(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetControl(self, *args):
        """
        GetControl(self, int id) -> Control

        Returns a control in the window.

        Parameters:
        -----------

        id:  the id of the control 
        """
        return _mc.Window_GetControl(self, *args)

    def GetLabel(self, *args):
        """
        GetLabel(self, int id) -> Label

        Returns a label control in the window. 
        """
        return _mc.Window_GetLabel(self, *args)

    def GetList(self, *args):
        """
        GetList(self, int id) -> List

        Returns a list control in the window. 
        """
        return _mc.Window_GetList(self, *args)

    def GetToggleButton(self, *args):
        """
        GetToggleButton(self, int id) -> ToggleButton

        Returns a toggle button control in the window. 
        """
        return _mc.Window_GetToggleButton(self, *args)

    def GetButton(self, *args):
        """
        GetButton(self, int id) -> Button

        Returns a button control in the window. 
        """
        return _mc.Window_GetButton(self, *args)

    def GetImage(self, *args):
        """
        GetImage(self, int id) -> Image

        Returns an image control in the window. 
        """
        return _mc.Window_GetImage(self, *args)

    def GetEdit(self, *args):
        """
        GetEdit(self, int id) -> Edit

        Returns an edit control in the window. 
        """
        return _mc.Window_GetEdit(self, *args)

    def GetTextbox(self, *args):
        """
        GetTextbox(self, int id) -> Textbox

        Returns a textbox control in the window. 
        """
        return _mc.Window_GetTextbox(self, *args)

    def PushState(self):
        """
        PushState(self)

        Saves the state of the window and pushes it to the top of the window
        state stack.

        By default, if user hits ESC or Back, instead of closing the window,
        it will pop the state and return it. The state includes contents of
        lists and the selected items in lists. This is useful if you want to
        support "drill down" navigation in a window. 
        """
        return _mc.Window_PushState(self)

    def PopState(self, restoreState = True):
        """
        PopState(self, bool restoreState = True)
        PopState(self)

        Pops a state from the state stack (see PushState()) and sets the user
        interface accordingly.

        Parameters:
        -----------

        restoreState:  true to restore the top most state in the stack 
        """
        return _mc.Window_PopState(self, restoreState)

    def PopToState(self, *args):
        """
        PopToState(self, int remainInStack)

        Pops states from the state stack (see PushState()) and leaves
        "count" states in the stack.

        Parameters:
        -----------

        remainInStack:  number of items to keep remained in the stack 
        """
        return _mc.Window_PopToState(self, *args)

    def ClearStateStack(self, restoreState = True):
        """
        ClearStateStack(self, bool restoreState = True)
        ClearStateStack(self)

        Clears all the saved states.

        Parameters:
        -----------

        restoreState:  restore the state of the bottom most state in the
        stack? 
        """
        return _mc.Window_ClearStateStack(self, restoreState)

    def SetProperty(self, *args):
        """SetProperty(self, string strKey, string strValue)"""
        return _mc.Window_SetProperty(self, *args)

    def GetWindowId(self):
        """
        GetWindowId(self) -> int

        Get window id. 
        """
        return _mc.Window_GetWindowId(self)

    def AddWindowListener(self, *args):
        """
        AddWindowListener(self, WindowListener listener)

        1
        """
        return _mc.Window_AddWindowListener(self, *args)

    def RemoveWindowListener(self, *args):
        """
        RemoveWindowListener(self, WindowListener listener)

        1
        """
        return _mc.Window_RemoveWindowListener(self, *args)

    def AddKeyListener(self, *args):
        """
        AddKeyListener(self, KeyListener listener)

        1
        """
        return _mc.Window_AddKeyListener(self, *args)

    def RemoveKeyListener(self, *args):
        """
        RemoveKeyListener(self, KeyListener listener)

        1
        """
        return _mc.Window_RemoveKeyListener(self, *args)

    __swig_destroy__ = _mc.delete_Window
    __del__ = lambda self : None;
Window_swigregister = _mc.Window_swigregister
Window_swigregister(Window)

class Http(_object):
    """
    This class represents the Http object. 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Http, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Http, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """
        __init__(self) -> Http

        Creates a new http object. 
        """
        this = _mc.new_Http()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mc.delete_Http
    __del__ = lambda self : None;
    def SetHttpHeader(self, *args):
        """
        SetHttpHeader(self, string strKey, string strValue)

        set a request http header

        Parameters:
        -----------

        strKey:  header name

        strValue:  header value 
        """
        return _mc.Http_SetHttpHeader(self, *args)

    def GetHttpHeader(self, *args):
        """
        GetHttpHeader(self, string strKey) -> string

        retrieves an http header from the reqponse

        Parameters:
        -----------

        strKey:  header name 
        """
        return _mc.Http_GetHttpHeader(self, *args)

    def GetHttpResponseCode(self):
        """
        GetHttpResponseCode(self) -> int

        get the http response code from the operation 
        """
        return _mc.Http_GetHttpResponseCode(self)

    def Get(self, *args):
        """
        Get(self, string strUrl) -> string

        perform an HTTP GET request

        Parameters:
        -----------

        strUrl:  the url to GET 
        """
        return _mc.Http_Get(self, *args)

    def Delete(self, *args):
        """
        Delete(self, string strUrl) -> string

        perform an HTTP DELETE request (verb - DELETE)

        Parameters:
        -----------

        strUrl:  the url to DELETE 
        """
        return _mc.Http_Delete(self, *args)

    def Post(self, *args):
        """
        Post(self, string strUrl, string strPostData) -> string

        perform an HTTP POST request

        Parameters:
        -----------

        strUrl:  the url to POST to

        strPostData:  the data (must be textual) to post in the request 
        """
        return _mc.Http_Post(self, *args)

    def Download(self, *args):
        """
        Download(self, string strUrl, string strLocalPath) -> bool

        download a file

        Parameters:
        -----------

        strUrl:  the url of the file to download

        strLocalPath:  the path to save the file to 
        """
        return _mc.Http_Download(self, *args)

    def SetUserAgent(self, *args):
        """
        SetUserAgent(self, string strUserAgent)

        set the user-agent field of the http request

        Parameters:
        -----------

        strUserAgent:  the user-agent value to use 
        """
        return _mc.Http_SetUserAgent(self, *args)

    def Reset(self):
        """
        Reset(self)

        reset the object - all data will re-initialize 
        """
        return _mc.Http_Reset(self)

Http_swigregister = _mc.Http_swigregister
Http_swigregister(Http)

class MC(_object):
    """
    Main class for interfacing with BOXEE. 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MC, name)
    __repr__ = _swig_repr
    def GetLocalizedString(*args):
        """
        GetLocalizedString(int id) -> string

        Returns a localized string based on an id of the string.

        Parameters:
        -----------

        id:  id of the string. could be either a system wide id or an
        application specific id. 
        """
        return _mc.MC_GetLocalizedString(*args)

    if _newclass:GetLocalizedString = staticmethod(GetLocalizedString)
    __swig_getmethods__["GetLocalizedString"] = lambda x: GetLocalizedString
    def GetInfoString(*args):
        """
        GetInfoString(string info) -> string

        Returns information about the user interface.

        See separate documentation regarding information that can be
        retrieved.

        Parameters:
        -----------

        info:  a string representing the information to be retrieved. 
        """
        return _mc.MC_GetInfoString(*args)

    if _newclass:GetInfoString = staticmethod(GetInfoString)
    __swig_getmethods__["GetInfoString"] = lambda x: GetInfoString
    def ShowDialogNotification(*args):
        """
        ShowDialogNotification(string msg, string thumbnail = "")
        ShowDialogNotification(string msg)

        Displays a notification at the upper right corner of the screen for 5
        seconds.

        Parameters:
        -----------

        msg:  mesage to be notified to the user.

        thumbnail:  file name that contains the image to be displayed.
        Optional. 
        """
        return _mc.MC_ShowDialogNotification(*args)

    if _newclass:ShowDialogNotification = staticmethod(ShowDialogNotification)
    __swig_getmethods__["ShowDialogNotification"] = lambda x: ShowDialogNotification
    def ShowDialogWait():
        """
        ShowDialogWait()

        Displays a wait dialog.

        This should be displayed during long operations. 
        """
        return _mc.MC_ShowDialogWait()

    if _newclass:ShowDialogWait = staticmethod(ShowDialogWait)
    __swig_getmethods__["ShowDialogWait"] = lambda x: ShowDialogWait
    def HideDialogWait():
        """
        HideDialogWait()

        Hides the wait dialog. 
        """
        return _mc.MC_HideDialogWait()

    if _newclass:HideDialogWait = staticmethod(HideDialogWait)
    __swig_getmethods__["HideDialogWait"] = lambda x: HideDialogWait
    def ShowDialogConfirm(*args):
        """
        ShowDialogConfirm(string heading, string body, string cancelButton, string confirmButton) -> bool

        Displays a confirmation dialog, such as Ok/Canel or Yes/No.

        Returns true if the confirm button was clicked or false if the cancel
        button was pressed or if the dialog was closed.

        Parameters:
        -----------

        heading:  heading for the dialog

        body:  contents of the dialog. use [CR] for line breaks.

        cancelButton:  text to appear in the cancel button. Default is
        "Cancel". Optional.

        confirmButton:  text to appear in the confirm button. Default is
        "Ok". Optional. 
        """
        return _mc.MC_ShowDialogConfirm(*args)

    if _newclass:ShowDialogConfirm = staticmethod(ShowDialogConfirm)
    __swig_getmethods__["ShowDialogConfirm"] = lambda x: ShowDialogConfirm
    def ShowDialogOk(*args):
        """
        ShowDialogOk(string heading, string body)

        Displays an "Ok" dialog for displaying information to the user.

        Parameters:
        -----------

        heading:  heading of the dialog

        body:  contents of the dialog. use [CR] for line breaks. 
        """
        return _mc.MC_ShowDialogOk(*args)

    if _newclass:ShowDialogOk = staticmethod(ShowDialogOk)
    __swig_getmethods__["ShowDialogOk"] = lambda x: ShowDialogOk
    def ShowDialogKeyboard(*args):
        """
        ShowDialogKeyboard(string heading, string defaultValue, bool hiddenInput) -> string

        Displays a keyboard dialog for text input.

        Returns true if a value was entered or false if the dialog was
        cancelled.

        Parameters:
        -----------

        heading:  heading of the dialog

        defaultValue:  value to be pre-populated in the dialog when displayed.
        if the dialog was closed with "Ok" it also contains the value that
        was types.

        hiddenInput:  false - the typed value is displayed, true - the typed
        value is hidden and * are shown instead. 
        """
        return _mc.MC_ShowDialogKeyboard(*args)

    if _newclass:ShowDialogKeyboard = staticmethod(ShowDialogKeyboard)
    __swig_getmethods__["ShowDialogKeyboard"] = lambda x: ShowDialogKeyboard
    def ShowDialogSelect(*args):
        """
        ShowDialogSelect(string heading, std::vector<(std::string,std::allocator<(std::string)>)> choices) -> int

        Displays a selection dialog between several string options.

        Parameters:
        -----------

        heading:  heading of the dialog

        choices:  choices to select from 
        """
        return _mc.MC_ShowDialogSelect(*args)

    if _newclass:ShowDialogSelect = staticmethod(ShowDialogSelect)
    __swig_getmethods__["ShowDialogSelect"] = lambda x: ShowDialogSelect
    def LogDebug(*args):
        """
        LogDebug(string msg)

        Log debug message into the Boxee log file.

        Parameters:
        -----------

        msg:  message to be written to the log file 
        """
        return _mc.MC_LogDebug(*args)

    if _newclass:LogDebug = staticmethod(LogDebug)
    __swig_getmethods__["LogDebug"] = lambda x: LogDebug
    def LogInfo(*args):
        """
        LogInfo(string msg)

        Log information message into the Boxee log file.

        Parameters:
        -----------

        msg:  message to be written to the log file 
        """
        return _mc.MC_LogInfo(*args)

    if _newclass:LogInfo = staticmethod(LogInfo)
    __swig_getmethods__["LogInfo"] = lambda x: LogInfo
    def LogError(*args):
        """
        LogError(string msg)

        Log error message into the Boxee log file.

        Parameters:
        -----------

        msg:  message to be written to the log file 
        """
        return _mc.MC_LogError(*args)

    if _newclass:LogError = staticmethod(LogError)
    __swig_getmethods__["LogError"] = lambda x: LogError
    def GetActiveWindow():
        """
        GetActiveWindow() -> Window

        Get a reference to the currently active window. 
        """
        return _mc.MC_GetActiveWindow()

    if _newclass:GetActiveWindow = staticmethod(GetActiveWindow)
    __swig_getmethods__["GetActiveWindow"] = lambda x: GetActiveWindow
    def GetWindow(*args):
        """
        GetWindow(int id) -> Window

        Get a reference to the window by its id.

        Parameters:
        -----------

        id:  the id of the window 
        """
        return _mc.MC_GetWindow(*args)

    if _newclass:GetWindow = staticmethod(GetWindow)
    __swig_getmethods__["GetWindow"] = lambda x: GetWindow
    def ActivateWindow(*args):
        """
        ActivateWindow(int id)

        Activate a specific window by its id.

        Parameters:
        -----------

        id:  the id of the window 
        """
        return _mc.MC_ActivateWindow(*args)

    if _newclass:ActivateWindow = staticmethod(ActivateWindow)
    __swig_getmethods__["ActivateWindow"] = lambda x: ActivateWindow
    def CloseWindow():
        """
        CloseWindow()

        Closes the currently active window and go to the previously open
        window. 
        """
        return _mc.MC_CloseWindow()

    if _newclass:CloseWindow = staticmethod(CloseWindow)
    __swig_getmethods__["CloseWindow"] = lambda x: CloseWindow
    def GetPlayer():
        """
        GetPlayer() -> Player

        Returns a reference to a media player that can be used for playing
        media. 
        """
        return _mc.MC_GetPlayer()

    if _newclass:GetPlayer = staticmethod(GetPlayer)
    __swig_getmethods__["GetPlayer"] = lambda x: GetPlayer
    def GetTempDir():
        """
        GetTempDir() -> string

        Returns the full path of a directory where temporary files can be
        placed. 
        """
        return _mc.MC_GetTempDir()

    if _newclass:GetTempDir = staticmethod(GetTempDir)
    __swig_getmethods__["GetTempDir"] = lambda x: GetTempDir
    def GetApp():
        """
        GetApp() -> App

        Returns a reference to the App object, that should be used for
        application specific operations. 
        """
        return _mc.MC_GetApp()

    if _newclass:GetApp = staticmethod(GetApp)
    __swig_getmethods__["GetApp"] = lambda x: GetApp
    def GetCookieJar():
        """
        GetCookieJar() -> string

        Returns the cookie jar used by boxee. 
        """
        return _mc.MC_GetCookieJar()

    if _newclass:GetCookieJar = staticmethod(GetCookieJar)
    __swig_getmethods__["GetCookieJar"] = lambda x: GetCookieJar
    def GetDirectory(*args):
        """
        GetDirectory(string strPath) -> ListItems

        Returns contents of specified path.

        Parameters:
        -----------

        strPath:  - path 
        """
        return _mc.MC_GetDirectory(*args)

    if _newclass:GetDirectory = staticmethod(GetDirectory)
    __swig_getmethods__["GetDirectory"] = lambda x: GetDirectory
    def GetFocusedItem(*args):
        """
        GetFocusedItem(int windowId, int listId) -> ListItem

        Returns focused item from the list.

        Parameters:
        -----------

        windowId:  - window id

        listId:  - id of the list 
        """
        return _mc.MC_GetFocusedItem(*args)

    if _newclass:GetFocusedItem = staticmethod(GetFocusedItem)
    __swig_getmethods__["GetFocusedItem"] = lambda x: GetFocusedItem
    def SetItems(*args):
        """
        SetItems(int windowId, int controlId, ListItems items, int selectedItem)

        Set the list of item to specified list.

        Parameters:
        -----------

        windowId:  - window id

        controlId:  - control id

        items:  - item list

        selectedItem:  - selected item 
        """
        return _mc.MC_SetItems(*args)

    if _newclass:SetItems = staticmethod(SetItems)
    __swig_getmethods__["SetItems"] = lambda x: SetItems
    def GetGeoLocation():
        """
        GetGeoLocation() -> string

        Returns geo location of the current user. 
        """
        return _mc.MC_GetGeoLocation()

    if _newclass:GetGeoLocation = staticmethod(GetGeoLocation)
    __swig_getmethods__["GetGeoLocation"] = lambda x: GetGeoLocation
    def GetDeviceId():
        """
        GetDeviceId() -> string

        Returns device id. 
        """
        return _mc.MC_GetDeviceId()

    if _newclass:GetDeviceId = staticmethod(GetDeviceId)
    __swig_getmethods__["GetDeviceId"] = lambda x: GetDeviceId
    def GetPlatform():
        """
        GetPlatform() -> string

        Returns platform id. 
        """
        return _mc.MC_GetPlatform()

    if _newclass:GetPlatform = staticmethod(GetPlatform)
    __swig_getmethods__["GetPlatform"] = lambda x: GetPlatform
    def IsEmbedded():
        """
        IsEmbedded() -> bool

        Returns true if running on embedded platform and false otherwise. 
        """
        return _mc.MC_IsEmbedded()

    if _newclass:IsEmbedded = staticmethod(IsEmbedded)
    __swig_getmethods__["IsEmbedded"] = lambda x: IsEmbedded
    def GetCurrentPositionInSec(*args):
        """
        GetCurrentPositionInSec(string strPath) -> int

        Returns current position of the played video in seconds.

        Parameters:
        -----------

        strPath:  - path of the video 
        """
        return _mc.MC_GetCurrentPositionInSec(*args)

    if _newclass:GetCurrentPositionInSec = staticmethod(GetCurrentPositionInSec)
    __swig_getmethods__["GetCurrentPositionInSec"] = lambda x: GetCurrentPositionInSec
    def GetWeatherLocation():
        """
        GetWeatherLocation() -> string

        Return the current weather setting location.

        For example: "USNY0996 - New York, NY" 
        """
        return _mc.MC_GetWeatherLocation()

    if _newclass:GetWeatherLocation = staticmethod(GetWeatherLocation)
    __swig_getmethods__["GetWeatherLocation"] = lambda x: GetWeatherLocation
    def SetWeatherLocation(*args):
        """
        SetWeatherLocation(string location)

        Return the current weather setting location.

        For example: "USNY0996 - New York, NY" 
        """
        return _mc.MC_SetWeatherLocation(*args)

    if _newclass:SetWeatherLocation = staticmethod(SetWeatherLocation)
    __swig_getmethods__["SetWeatherLocation"] = lambda x: SetWeatherLocation
    def SetWeatherLocation2(*args):
        """
        SetWeatherLocation2(string cityName, string countryCode) -> bool

        Set the current weather setting location.

        Parameters:
        -----------

        cityName:  - the city name

        countryCode:  - the city country code Returns true on success and
        false on failure 
        """
        return _mc.MC_SetWeatherLocation2(*args)

    if _newclass:SetWeatherLocation2 = staticmethod(SetWeatherLocation2)
    __swig_getmethods__["SetWeatherLocation2"] = lambda x: SetWeatherLocation2
    def GetTimezoneCountry():
        """
        GetTimezoneCountry() -> string

        Return the current timezone country setting location. 
        """
        return _mc.MC_GetTimezoneCountry()

    if _newclass:GetTimezoneCountry = staticmethod(GetTimezoneCountry)
    __swig_getmethods__["GetTimezoneCountry"] = lambda x: GetTimezoneCountry
    def GetTimezoneCity():
        """
        GetTimezoneCity() -> string

        Return the current timezone city setting location. 
        """
        return _mc.MC_GetTimezoneCity()

    if _newclass:GetTimezoneCity = staticmethod(GetTimezoneCity)
    __swig_getmethods__["GetTimezoneCity"] = lambda x: GetTimezoneCity
    def GetTemperatureScale():
        """
        GetTemperatureScale() -> string

        Return the current temperature scale.

        Either 'C' or 'F'. 
        """
        return _mc.MC_GetTemperatureScale()

    if _newclass:GetTemperatureScale = staticmethod(GetTemperatureScale)
    __swig_getmethods__["GetTemperatureScale"] = lambda x: GetTemperatureScale
    def SetTemperatureScale(*args):
        """
        SetTemperatureScale(string scale)

        Set the temperature scale.

        Input should be either 'C' or 'F'. 
        """
        return _mc.MC_SetTemperatureScale(*args)

    if _newclass:SetTemperatureScale = staticmethod(SetTemperatureScale)
    __swig_getmethods__["SetTemperatureScale"] = lambda x: SetTemperatureScale
    def IsConnectedToInternet():
        """
        IsConnectedToInternet() -> bool

        Returns true if has internet connection. 
        """
        return _mc.MC_IsConnectedToInternet()

    if _newclass:IsConnectedToInternet = staticmethod(IsConnectedToInternet)
    __swig_getmethods__["IsConnectedToInternet"] = lambda x: IsConnectedToInternet
    def GetUniqueId():
        """
        GetUniqueId() -> string

        Returns unique box id. 
        """
        return _mc.MC_GetUniqueId()

    if _newclass:GetUniqueId = staticmethod(GetUniqueId)
    __swig_getmethods__["GetUniqueId"] = lambda x: GetUniqueId
    def GetSystemLanguage():
        """
        GetSystemLanguage() -> string

        Returns the system language. 
        """
        return _mc.MC_GetSystemLanguage()

    if _newclass:GetSystemLanguage = staticmethod(GetSystemLanguage)
    __swig_getmethods__["GetSystemLanguage"] = lambda x: GetSystemLanguage
    def GetHardwareVendor():
        """
        GetHardwareVendor() -> string

        Returns box vendor name. 
        """
        return _mc.MC_GetHardwareVendor()

    if _newclass:GetHardwareVendor = staticmethod(GetHardwareVendor)
    __swig_getmethods__["GetHardwareVendor"] = lambda x: GetHardwareVendor
    def GetHardwareModel():
        """
        GetHardwareModel() -> string

        Returns box model name. 
        """
        return _mc.MC_GetHardwareModel()

    if _newclass:GetHardwareModel = staticmethod(GetHardwareModel)
    __swig_getmethods__["GetHardwareModel"] = lambda x: GetHardwareModel
    def GetHardwareRevision():
        """
        GetHardwareRevision() -> string

        Returns box revision number. 
        """
        return _mc.MC_GetHardwareRevision()

    if _newclass:GetHardwareRevision = staticmethod(GetHardwareRevision)
    __swig_getmethods__["GetHardwareRevision"] = lambda x: GetHardwareRevision
    def GetHardwareSerialNumber():
        """
        GetHardwareSerialNumber() -> string

        Returns box revision number. 
        """
        return _mc.MC_GetHardwareSerialNumber()

    if _newclass:GetHardwareSerialNumber = staticmethod(GetHardwareSerialNumber)
    __swig_getmethods__["GetHardwareSerialNumber"] = lambda x: GetHardwareSerialNumber
    def __init__(self): 
        """
        __init__(self) -> MC

        1
        """
        this = _mc.new_MC()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mc.delete_MC
    __del__ = lambda self : None;
MC_swigregister = _mc.MC_swigregister
MC_swigregister(MC)

def MC_GetLocalizedString(*args):
  """
    MC_GetLocalizedString(int id) -> string

    Returns a localized string based on an id of the string.

    Parameters:
    -----------

    id:  id of the string. could be either a system wide id or an
    application specific id. 
    """
  return _mc.MC_GetLocalizedString(*args)

def MC_GetInfoString(*args):
  """
    MC_GetInfoString(string info) -> string

    Returns information about the user interface.

    See separate documentation regarding information that can be
    retrieved.

    Parameters:
    -----------

    info:  a string representing the information to be retrieved. 
    """
  return _mc.MC_GetInfoString(*args)

def MC_ShowDialogNotification(*args):
  """
    ShowDialogNotification(string msg, string thumbnail = "")
    MC_ShowDialogNotification(string msg)

    Displays a notification at the upper right corner of the screen for 5
    seconds.

    Parameters:
    -----------

    msg:  mesage to be notified to the user.

    thumbnail:  file name that contains the image to be displayed.
    Optional. 
    """
  return _mc.MC_ShowDialogNotification(*args)

def MC_ShowDialogWait():
  """
    MC_ShowDialogWait()

    Displays a wait dialog.

    This should be displayed during long operations. 
    """
  return _mc.MC_ShowDialogWait()

def MC_HideDialogWait():
  """
    MC_HideDialogWait()

    Hides the wait dialog. 
    """
  return _mc.MC_HideDialogWait()

def MC_ShowDialogConfirm(*args):
  """
    MC_ShowDialogConfirm(string heading, string body, string cancelButton, string confirmButton) -> bool

    Displays a confirmation dialog, such as Ok/Canel or Yes/No.

    Returns true if the confirm button was clicked or false if the cancel
    button was pressed or if the dialog was closed.

    Parameters:
    -----------

    heading:  heading for the dialog

    body:  contents of the dialog. use [CR] for line breaks.

    cancelButton:  text to appear in the cancel button. Default is
    "Cancel". Optional.

    confirmButton:  text to appear in the confirm button. Default is
    "Ok". Optional. 
    """
  return _mc.MC_ShowDialogConfirm(*args)

def MC_ShowDialogOk(*args):
  """
    MC_ShowDialogOk(string heading, string body)

    Displays an "Ok" dialog for displaying information to the user.

    Parameters:
    -----------

    heading:  heading of the dialog

    body:  contents of the dialog. use [CR] for line breaks. 
    """
  return _mc.MC_ShowDialogOk(*args)

def MC_ShowDialogKeyboard(*args):
  """
    MC_ShowDialogKeyboard(string heading, string defaultValue, bool hiddenInput) -> string

    Displays a keyboard dialog for text input.

    Returns true if a value was entered or false if the dialog was
    cancelled.

    Parameters:
    -----------

    heading:  heading of the dialog

    defaultValue:  value to be pre-populated in the dialog when displayed.
    if the dialog was closed with "Ok" it also contains the value that
    was types.

    hiddenInput:  false - the typed value is displayed, true - the typed
    value is hidden and * are shown instead. 
    """
  return _mc.MC_ShowDialogKeyboard(*args)

def MC_ShowDialogSelect(*args):
  """
    MC_ShowDialogSelect(string heading, std::vector<(std::string,std::allocator<(std::string)>)> choices) -> int

    Displays a selection dialog between several string options.

    Parameters:
    -----------

    heading:  heading of the dialog

    choices:  choices to select from 
    """
  return _mc.MC_ShowDialogSelect(*args)

def MC_LogDebug(*args):
  """
    MC_LogDebug(string msg)

    Log debug message into the Boxee log file.

    Parameters:
    -----------

    msg:  message to be written to the log file 
    """
  return _mc.MC_LogDebug(*args)

def MC_LogInfo(*args):
  """
    MC_LogInfo(string msg)

    Log information message into the Boxee log file.

    Parameters:
    -----------

    msg:  message to be written to the log file 
    """
  return _mc.MC_LogInfo(*args)

def MC_LogError(*args):
  """
    MC_LogError(string msg)

    Log error message into the Boxee log file.

    Parameters:
    -----------

    msg:  message to be written to the log file 
    """
  return _mc.MC_LogError(*args)

def MC_GetActiveWindow():
  """
    MC_GetActiveWindow() -> Window

    Get a reference to the currently active window. 
    """
  return _mc.MC_GetActiveWindow()

def MC_GetWindow(*args):
  """
    MC_GetWindow(int id) -> Window

    Get a reference to the window by its id.

    Parameters:
    -----------

    id:  the id of the window 
    """
  return _mc.MC_GetWindow(*args)

def MC_ActivateWindow(*args):
  """
    MC_ActivateWindow(int id)

    Activate a specific window by its id.

    Parameters:
    -----------

    id:  the id of the window 
    """
  return _mc.MC_ActivateWindow(*args)

def MC_CloseWindow():
  """
    MC_CloseWindow()

    Closes the currently active window and go to the previously open
    window. 
    """
  return _mc.MC_CloseWindow()

def MC_GetPlayer():
  """
    MC_GetPlayer() -> Player

    Returns a reference to a media player that can be used for playing
    media. 
    """
  return _mc.MC_GetPlayer()

def MC_GetTempDir():
  """
    MC_GetTempDir() -> string

    Returns the full path of a directory where temporary files can be
    placed. 
    """
  return _mc.MC_GetTempDir()

def MC_GetApp():
  """
    MC_GetApp() -> App

    Returns a reference to the App object, that should be used for
    application specific operations. 
    """
  return _mc.MC_GetApp()

def MC_GetCookieJar():
  """
    MC_GetCookieJar() -> string

    Returns the cookie jar used by boxee. 
    """
  return _mc.MC_GetCookieJar()

def MC_GetDirectory(*args):
  """
    MC_GetDirectory(string strPath) -> ListItems

    Returns contents of specified path.

    Parameters:
    -----------

    strPath:  - path 
    """
  return _mc.MC_GetDirectory(*args)

def MC_GetFocusedItem(*args):
  """
    MC_GetFocusedItem(int windowId, int listId) -> ListItem

    Returns focused item from the list.

    Parameters:
    -----------

    windowId:  - window id

    listId:  - id of the list 
    """
  return _mc.MC_GetFocusedItem(*args)

def MC_SetItems(*args):
  """
    MC_SetItems(int windowId, int controlId, ListItems items, int selectedItem)

    Set the list of item to specified list.

    Parameters:
    -----------

    windowId:  - window id

    controlId:  - control id

    items:  - item list

    selectedItem:  - selected item 
    """
  return _mc.MC_SetItems(*args)

def MC_GetGeoLocation():
  """
    MC_GetGeoLocation() -> string

    Returns geo location of the current user. 
    """
  return _mc.MC_GetGeoLocation()

def MC_GetDeviceId():
  """
    MC_GetDeviceId() -> string

    Returns device id. 
    """
  return _mc.MC_GetDeviceId()

def MC_GetPlatform():
  """
    MC_GetPlatform() -> string

    Returns platform id. 
    """
  return _mc.MC_GetPlatform()

def MC_IsEmbedded():
  """
    MC_IsEmbedded() -> bool

    Returns true if running on embedded platform and false otherwise. 
    """
  return _mc.MC_IsEmbedded()

def MC_GetCurrentPositionInSec(*args):
  """
    MC_GetCurrentPositionInSec(string strPath) -> int

    Returns current position of the played video in seconds.

    Parameters:
    -----------

    strPath:  - path of the video 
    """
  return _mc.MC_GetCurrentPositionInSec(*args)

def MC_GetWeatherLocation():
  """
    MC_GetWeatherLocation() -> string

    Return the current weather setting location.

    For example: "USNY0996 - New York, NY" 
    """
  return _mc.MC_GetWeatherLocation()

def MC_SetWeatherLocation(*args):
  """
    MC_SetWeatherLocation(string location)

    Return the current weather setting location.

    For example: "USNY0996 - New York, NY" 
    """
  return _mc.MC_SetWeatherLocation(*args)

def MC_SetWeatherLocation2(*args):
  """
    MC_SetWeatherLocation2(string cityName, string countryCode) -> bool

    Set the current weather setting location.

    Parameters:
    -----------

    cityName:  - the city name

    countryCode:  - the city country code Returns true on success and
    false on failure 
    """
  return _mc.MC_SetWeatherLocation2(*args)

def MC_GetTimezoneCountry():
  """
    MC_GetTimezoneCountry() -> string

    Return the current timezone country setting location. 
    """
  return _mc.MC_GetTimezoneCountry()

def MC_GetTimezoneCity():
  """
    MC_GetTimezoneCity() -> string

    Return the current timezone city setting location. 
    """
  return _mc.MC_GetTimezoneCity()

def MC_GetTemperatureScale():
  """
    MC_GetTemperatureScale() -> string

    Return the current temperature scale.

    Either 'C' or 'F'. 
    """
  return _mc.MC_GetTemperatureScale()

def MC_SetTemperatureScale(*args):
  """
    MC_SetTemperatureScale(string scale)

    Set the temperature scale.

    Input should be either 'C' or 'F'. 
    """
  return _mc.MC_SetTemperatureScale(*args)

def MC_IsConnectedToInternet():
  """
    MC_IsConnectedToInternet() -> bool

    Returns true if has internet connection. 
    """
  return _mc.MC_IsConnectedToInternet()

def MC_GetUniqueId():
  """
    MC_GetUniqueId() -> string

    Returns unique box id. 
    """
  return _mc.MC_GetUniqueId()

def MC_GetSystemLanguage():
  """
    MC_GetSystemLanguage() -> string

    Returns the system language. 
    """
  return _mc.MC_GetSystemLanguage()

def MC_GetHardwareVendor():
  """
    MC_GetHardwareVendor() -> string

    Returns box vendor name. 
    """
  return _mc.MC_GetHardwareVendor()

def MC_GetHardwareModel():
  """
    MC_GetHardwareModel() -> string

    Returns box model name. 
    """
  return _mc.MC_GetHardwareModel()

def MC_GetHardwareRevision():
  """
    MC_GetHardwareRevision() -> string

    Returns box revision number. 
    """
  return _mc.MC_GetHardwareRevision()

def MC_GetHardwareSerialNumber():
  """
    MC_GetHardwareSerialNumber() -> string

    Returns box revision number. 
    """
  return _mc.MC_GetHardwareSerialNumber()

class Player(_object):
    """
    This class represents the Player object used for playing all kinds of
    media items. 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Player, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Player, name)
    __repr__ = _swig_repr
    XAPP_PLAYER_ACTION_NONE = _mc.Player_XAPP_PLAYER_ACTION_NONE
    XAPP_PLAYER_ACTION_NEXT = _mc.Player_XAPP_PLAYER_ACTION_NEXT
    XAPP_PLAYER_ACTION_PREV = _mc.Player_XAPP_PLAYER_ACTION_PREV
    XAPP_PLAYER_ACTION_STOP = _mc.Player_XAPP_PLAYER_ACTION_STOP
    XAPP_PLAYER_ACTION_SEEK = _mc.Player_XAPP_PLAYER_ACTION_SEEK
    XAPP_PLAYER_ACTION_OSD_EXT = _mc.Player_XAPP_PLAYER_ACTION_OSD_EXT
    EVENT_NEXT_ITEM = _mc.Player_EVENT_NEXT_ITEM
    EVENT_STOPPED = _mc.Player_EVENT_STOPPED
    EVENT_ENDED = _mc.Player_EVENT_ENDED
    EVENT_STARTED = _mc.Player_EVENT_STARTED
    EVENT_NONE = _mc.Player_EVENT_NONE
    REPEAT_NONE = _mc.Player_REPEAT_NONE
    REPEAT_ONE = _mc.Player_REPEAT_ONE
    REPEAT_ALL = _mc.Player_REPEAT_ALL
    def __init__(self, bRegisterCallbacks = False): 
        """
        __init__(self, bool bRegisterCallbacks = False) -> Player
        __init__(self) -> Player

        Creates a new player object.

        Parameters:
        -----------

        bRegisterCallbacks:  indicates whether player action and event
        callbacks are tracked, false by default. If you enable callbacks you
        must have a single instance of a player in your application. 
        """
        this = _mc.new_Player(bRegisterCallbacks)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mc.delete_Player
    __del__ = lambda self : None;
    def PlaySelected(self, *args):
        """
        PlaySelected(self, int iItem, int type = 0)
        PlaySelected(self, int iItem)

        Play item with specified index from the current playlist.

        Parameters:
        -----------

        iItem:  index of the item to play from the current playlist

        TODO: Can not use the enum because of name conflict with existing
        PLAYLIST_MUSIC and PLAYLIST_VIDEO 
        """
        return _mc.Player_PlaySelected(self, *args)

    def GetTime(self):
        """
        GetTime(self) -> double

        Returns the current time in seconds of the currently playing media.

        Fractional portions of a second are possible. This returns a double to
        be consistent with GetTotalTime() and SeekTime(). Throws an exception
        if no item is currently playing. 
        """
        return _mc.Player_GetTime(self)

    def GetPlaylistTimecode(self):
        """
        GetPlaylistTimecode(self) -> double

        Returns the current time (EXT-X-PROGRAM-DATE-TIME) in seconds of the
        currently playing HTTP live stream. 
        """
        return _mc.Player_GetPlaylistTimecode(self)

    def SeekTime(self, *args):
        """
        SeekTime(self, double seekTime)

        Sets the current position of the currently playing media to the
        specified time in seconds.

        Fractional portions of a second are valid. The passed time is the time
        offset from the beginning of the file as opposed to a delta from the
        current position. This method accepts a double to be consistent with
        GetTime() and GetTotalTime().

        Parameters:
        -----------

        seekTime:  time in seconds 
        """
        return _mc.Player_SeekTime(self, *args)

    def GetTotalTime(self):
        """
        GetTotalTime(self) -> double

        Returns the total time in seconds of the current media.

        Fractional portions of a second are possible - but not necessarily
        supported by the player class. This returns a double to be consistent
        with GetTime() and SeekTime(). Throws an exception if no item is
        currently playing. 
        """
        return _mc.Player_GetTotalTime(self)

    def Stop(self):
        """
        Stop(self)

        Stops playback. 
        """
        return _mc.Player_Stop(self)

    def Play(self, *args):
        """
        Play(self, ListItem item)

        Plays the specified list item.

        Parameters:
        -----------

        item:  item to play 
        """
        return _mc.Player_Play(self, *args)

    def QueueNextItem(self, *args):
        """QueueNextItem(self, ListItem item)"""
        return _mc.Player_QueueNextItem(self, *args)

    def PlayRaw(self, *args):
        """
        PlayRaw(self, ListItem item)

        Plays the specified list item.

        Parameters:
        -----------

        item:  item to play 
        """
        return _mc.Player_PlayRaw(self, *args)

    def UpdateItem(self, *args):
        """UpdateItem(self, ListItem item)"""
        return _mc.Player_UpdateItem(self, *args)

    def FeedRaw(self, *args):
        """FeedRaw(self, unsigned char data, unsigned int length) -> int"""
        return _mc.Player_FeedRaw(self, *args)

    def FlushRaw(self):
        """FlushRaw(self)"""
        return _mc.Player_FlushRaw(self)

    def RawClose(self):
        """RawClose(self)"""
        return _mc.Player_RawClose(self)

    def RawIsEmpty(self):
        """RawIsEmpty(self) -> bool"""
        return _mc.Player_RawIsEmpty(self)

    def RawSetEOF(self):
        """RawSetEOF(self)"""
        return _mc.Player_RawSetEOF(self)

    def QueueNextRaw(self, *args):
        """QueueNextRaw(self, ListItem item)"""
        return _mc.Player_QueueNextRaw(self, *args)

    __swig_setmethods__["m_currentRawPipe"] = _mc.Player_m_currentRawPipe_set
    __swig_getmethods__["m_currentRawPipe"] = _mc.Player_m_currentRawPipe_get
    if _newclass:m_currentRawPipe = _swig_property(_mc.Player_m_currentRawPipe_get, _mc.Player_m_currentRawPipe_set)
    __swig_setmethods__["m_bFirstFeed"] = _mc.Player_m_bFirstFeed_set
    __swig_getmethods__["m_bFirstFeed"] = _mc.Player_m_bFirstFeed_get
    if _newclass:m_bFirstFeed = _swig_property(_mc.Player_m_bFirstFeed_get, _mc.Player_m_bFirstFeed_set)
    def PlayInBackground(self, *args):
        """
        PlayInBackground(self, ListItem item)

        Plays the specified list item without switching to full screen video
        window.

        Parameters:
        -----------

        item:  item to play 
        """
        return _mc.Player_PlayInBackground(self, *args)

    def PlayWithActionMenu(self, *args):
        """
        PlayWithActionMenu(self, ListItem item)

        Open Media Action Dialog on specified item.

        Parameters:
        -----------

        item:  item to play 
        """
        return _mc.Player_PlayWithActionMenu(self, *args)

    def PlaySlideshow(self, *args):
        """
        PlaySlideshow(self, ListItems pictures, bool bRandom, bool bNotRandom, 
            string strPictureToStart, bool startPaused)

        Plays list of pictures in slideshow.

        Parameters:
        -----------

        pictures:  - list of pictures to present

        bRandom:  - always shuffle list

        bNotRandom:  - do not shuffle list (if true) if false use
        "slideshow.shuffle" setting

        strPictureToStart:  - picture to start with

        startPaused:  - whether the slide show will be started in paused state

        """
        return _mc.Player_PlaySlideshow(self, *args)

    def Pause(self):
        """
        Pause(self)

        Pause playback. 
        """
        return _mc.Player_Pause(self)

    def PlayNext(self):
        """
        PlayNext(self)

        Skip to next item in the playlist. 
        """
        return _mc.Player_PlayNext(self)

    def PlayPrevious(self):
        """
        PlayPrevious(self)

        Skip to the previous item in the playlist. 
        """
        return _mc.Player_PlayPrevious(self)

    def LockPlayerAction(self, *args):
        """
        LockPlayerAction(self, PLAYER_ACTION action)

        Disable specific player action Use XAPP_PLAYER_ACTION_NONE to unlock
        all action.

        Parameters:
        -----------

        action:  action to lock 
        """
        return _mc.Player_LockPlayerAction(self, *args)

    def GetLastPlayerEvent(self):
        """
        GetLastPlayerEvent(self) -> PLAYER_EVENT

        Returns the last event that occured in the player. 
        """
        return _mc.Player_GetLastPlayerEvent(self)

    def SetLastPlayerEvent(self, *args):
        """
        SetLastPlayerEvent(self, PLAYER_EVENT event)

        Set player event.

        Parameters:
        -----------

        event:  player event 
        """
        return _mc.Player_SetLastPlayerEvent(self, *args)

    def GetLastPlayerAction(self):
        """
        GetLastPlayerAction(self) -> PLAYER_ACTION

        Get last action performed by the player. 
        """
        return _mc.Player_GetLastPlayerAction(self)

    def SetLastPlayerAction(self, *args):
        """
        SetLastPlayerAction(self, PLAYER_ACTION action)

        Set lst player action.

        Parameters:
        -----------

        action:  player action 
        """
        return _mc.Player_SetLastPlayerAction(self, *args)

    def SetSeekRequestTime(self, *args):
        """
        SetSeekRequestTime(self, int iTime)

        Set lst player seek time.

        Parameters:
        -----------

        action:  player action 
        """
        return _mc.Player_SetSeekRequestTime(self, *args)

    def SetOsdExtAmount(self, *args):
        """SetOsdExtAmount(self, int amount)"""
        return _mc.Player_SetOsdExtAmount(self, *args)

    def GetSeekRequestTime(self):
        """
        GetSeekRequestTime(self) -> int

        Get lst player seek time.

        Parameters:
        -----------

        action:  player action 
        """
        return _mc.Player_GetSeekRequestTime(self)

    def GetPlayingItem(self):
        """
        GetPlayingItem(self) -> ListItem

        Returns the currently playing item. 
        """
        return _mc.Player_GetPlayingItem(self)

    def IsPlaying(self):
        """
        IsPlaying(self) -> bool

        Returns true if Boxee is currently playing media, false otherwise. 
        """
        return _mc.Player_IsPlaying(self)

    def IsPlayingAudio(self):
        """
        IsPlayingAudio(self) -> bool

        Returns true if Boxee is currently playing audio, false otherwise. 
        """
        return _mc.Player_IsPlayingAudio(self)

    def IsPlayingVideo(self):
        """
        IsPlayingVideo(self) -> bool

        Returns true if Boxee is currently playing video, false otherwise. 
        """
        return _mc.Player_IsPlayingVideo(self)

    def IsPaused(self):
        """
        IsPaused(self) -> bool

        Returns true if playback is paused. 
        """
        return _mc.Player_IsPaused(self)

    def IsCaching(self):
        """
        IsCaching(self) -> bool

        Returns true if the player is currently at the caching phase. 
        """
        return _mc.Player_IsCaching(self)

    def IsForwarding(self):
        """
        IsForwarding(self) -> bool

        Returns true if the player is currently perfroming fast forward
        operation. 
        """
        return _mc.Player_IsForwarding(self)

    def IsRewinding(self):
        """
        IsRewinding(self) -> bool

        Returns true if the player is currently perfroming rewind operation.

        """
        return _mc.Player_IsRewinding(self)

    def SetVolume(self, *args):
        """
        SetVolume(self, int percent)

        Set Boxee volume.

        Parameters:
        -----------

        percent:  volume value (in percent) 
        """
        return _mc.Player_SetVolume(self, *args)

    def GetVolume(self):
        """
        GetVolume(self) -> int

        Returns current volume of the application. 
        """
        return _mc.Player_GetVolume(self)

    def ToggleMute(self):
        """
        ToggleMute(self)

        Mute Boxee. 
        """
        return _mc.Player_ToggleMute(self)

    def IsShuffle(self):
        """
        IsShuffle(self) -> bool

        Return true if the current playlist is shuffle. 
        """
        return _mc.Player_IsShuffle(self)

    def ResumeAudio(self):
        """ResumeAudio(self)"""
        return _mc.Player_ResumeAudio(self)

    def GetRepeatState(self):
        """
        GetRepeatState(self) -> PLAYER_REPEAT_STATE

        Return true if the current playlist is repeat. 
        """
        return _mc.Player_GetRepeatState(self)

Player_swigregister = _mc.Player_swigregister
Player_swigregister(Player)

class PlayList(_object):
    """
    Represents a play list. 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlayList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlayList, name)
    __repr__ = _swig_repr
    PLAYLIST_MUSIC = _mc.PlayList_PLAYLIST_MUSIC
    PLAYLIST_VIDEO = _mc.PlayList_PLAYLIST_VIDEO
    def __init__(self, *args): 
        """
        __init__(self, PlayListType type) -> PlayList

        Create playlist of the specifed type (music or video) 
        """
        this = _mc.new_PlayList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mc.delete_PlayList
    __del__ = lambda self : None;
    def Play(self, *args):
        """
        Play(self, int iItem)

        Plays the specified item from the playlist. 
        """
        return _mc.PlayList_Play(self, *args)

    def Add(self, *args):
        """
        Add(self, ListItem item)

        Add item to the playlist.

        Parameters:
        -----------

        item:  item to add 
        """
        return _mc.PlayList_Add(self, *args)

    def AddBackground(self, *args):
        """
        AddBackground(self, ListItem item)

        Add item to the playlist to be played in the background.

        Parameters:
        -----------

        item:  item to add 
        """
        return _mc.PlayList_AddBackground(self, *args)

    def GetItem(self, *args):
        """
        GetItem(self, int index) -> ListItem

        Returns the item with the specified index from the playlist. 
        """
        return _mc.PlayList_GetItem(self, *args)

    def Clear(self):
        """
        Clear(self)

        Clears playlist. 
        """
        return _mc.PlayList_Clear(self)

    def GetPosition(self):
        """
        GetPosition(self) -> int

        Returns the position of the current item in the playlist. 
        """
        return _mc.PlayList_GetPosition(self)

    def Size(self):
        """
        Size(self) -> int

        Returns the size of the playlist. 
        """
        return _mc.PlayList_Size(self)

    def IsShuffle(self):
        """
        IsShuffle(self) -> bool

        Return true if the playlist is shuffle. 
        """
        return _mc.PlayList_IsShuffle(self)

PlayList_swigregister = _mc.PlayList_swigregister
PlayList_swigregister(PlayList)

class Parameters(stdParameters):
    """
    This class represents parameters that are passed to application
    launch.

    Should be used as a dictionary. 
    """
    __swig_setmethods__ = {}
    for _s in [stdParameters]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parameters, name, value)
    __swig_getmethods__ = {}
    for _s in [stdParameters]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Parameters, name)
    __repr__ = _swig_repr
    def toQueryString(self):
        """
        toQueryString(self) -> string

        Converts the parameters in a URL query to a string:
        key=value&key2=value. 
        """
        return _mc.Parameters_toQueryString(self)

    def __init__(self): 
        """
        __init__(self) -> Parameters

        1
        """
        this = _mc.new_Parameters()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mc.delete_Parameters
    __del__ = lambda self : None;
Parameters_swigregister = _mc.Parameters_swigregister
Parameters_swigregister(Parameters)

class App(_object):
    """
    Main class for working with an application.

    Includes launching of applications, accessing the application
    configuration parameters storage, etc. Get the App object by calling
    GetApp() function. 
    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, App, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, App, name)
    __repr__ = _swig_repr
    def GetLocalConfig():
        """
        GetLocalConfig() -> LocalConfig

        Returns the local configuration storage for an application. 
        """
        return _mc.App_GetLocalConfig()

    if _newclass:GetLocalConfig = staticmethod(GetLocalConfig)
    __swig_getmethods__["GetLocalConfig"] = lambda x: GetLocalConfig
    def ActivateWindow(*args):
        """
        ActivateWindow(int windowId, Parameters parameters)

        Activate a window of the application with parameters.

        Parameters:
        -----------

        windowId:  window id

        parameters:  parameters that will be passed to the application 
        """
        return _mc.App_ActivateWindow(*args)

    if _newclass:ActivateWindow = staticmethod(ActivateWindow)
    __swig_getmethods__["ActivateWindow"] = lambda x: ActivateWindow
    def Close():
        """
        Close()

        Closes the application and stops application thread. 
        """
        return _mc.App_Close()

    if _newclass:Close = staticmethod(Close)
    __swig_getmethods__["Close"] = lambda x: Close
    def GetLaunchedWindowParameters():
        """
        GetLaunchedWindowParameters() -> Parameters

        Returns the parameters of the activated application window using
        ActivateWindow. 
        """
        return _mc.App_GetLaunchedWindowParameters()

    if _newclass:GetLaunchedWindowParameters = staticmethod(GetLaunchedWindowParameters)
    __swig_getmethods__["GetLaunchedWindowParameters"] = lambda x: GetLaunchedWindowParameters
    def GetLaunchedListItem():
        """
        GetLaunchedListItem() -> ListItem

        Returns the list item that the application was launched with.

        this is mainly useful to get an item from the
        history/recommendation/rating. 
        """
        return _mc.App_GetLaunchedListItem()

    if _newclass:GetLaunchedListItem = staticmethod(GetLaunchedListItem)
    __swig_getmethods__["GetLaunchedListItem"] = lambda x: GetLaunchedListItem
    def RunScript(*args):
        """
        RunScript(string scriptName, Parameters parameters)

        Run a python script of an application.

        Parameters:
        -----------

        scriptName:  script name

        parameters:  parameters that will be passed to the application script

        """
        return _mc.App_RunScript(*args)

    if _newclass:RunScript = staticmethod(RunScript)
    __swig_getmethods__["RunScript"] = lambda x: RunScript
    def SendMessage(*args):
        """
        SendMessage(string handler, string parameter)

        Send a message to an application The mesage will be passed to a global
        handler.

        Parameters:
        -----------

        handler:  allows to specify which handler should eventually handle the
        message

        parameter:  additional string parameter 
        """
        return _mc.App_SendMessage(*args)

    if _newclass:SendMessage = staticmethod(SendMessage)
    __swig_getmethods__["SendMessage"] = lambda x: SendMessage
    def GetLaunchedScriptParameters():
        """
        GetLaunchedScriptParameters() -> Parameters

        Returns the parameters of the executed script using RunScript.

        You can also access those parameters with sys.arv[1]. 
        """
        return _mc.App_GetLaunchedScriptParameters()

    if _newclass:GetLaunchedScriptParameters = staticmethod(GetLaunchedScriptParameters)
    __swig_getmethods__["GetLaunchedScriptParameters"] = lambda x: GetLaunchedScriptParameters
    def GetId():
        """
        GetId() -> string

        Returns the id of the currently running application. 
        """
        return _mc.App_GetId()

    if _newclass:GetId = staticmethod(GetId)
    __swig_getmethods__["GetId"] = lambda x: GetId
    def GetAppDir():
        """
        GetAppDir() -> string

        Returns the full path where the application is installed. 
        """
        return _mc.App_GetAppDir()

    if _newclass:GetAppDir = staticmethod(GetAppDir)
    __swig_getmethods__["GetAppDir"] = lambda x: GetAppDir
    def GetAppMediaDir():
        """
        GetAppMediaDir() -> string

        Returns the full path where the media files of the application are
        stored. 
        """
        return _mc.App_GetAppMediaDir()

    if _newclass:GetAppMediaDir = staticmethod(GetAppMediaDir)
    __swig_getmethods__["GetAppMediaDir"] = lambda x: GetAppMediaDir
    def GetAppSkinDir():
        """
        GetAppSkinDir() -> string

        Returns the full path where the skin files of the application are
        stored. 
        """
        return _mc.App_GetAppSkinDir()

    if _newclass:GetAppSkinDir = staticmethod(GetAppSkinDir)
    __swig_getmethods__["GetAppSkinDir"] = lambda x: GetAppSkinDir
    def GetAuthenticationToken():
        """
        GetAuthenticationToken() -> string

        Returns an authentication token for the application.

        For boxee internal use. 
        """
        return _mc.App_GetAuthenticationToken()

    if _newclass:GetAuthenticationToken = staticmethod(GetAuthenticationToken)
    __swig_getmethods__["GetAuthenticationToken"] = lambda x: GetAuthenticationToken
    def __init__(self): 
        """
        __init__(self) -> App

        1
        """
        this = _mc.new_App()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mc.delete_App
    __del__ = lambda self : None;
App_swigregister = _mc.App_swigregister
App_swigregister(App)

def App_GetLocalConfig():
  """
    App_GetLocalConfig() -> LocalConfig

    Returns the local configuration storage for an application. 
    """
  return _mc.App_GetLocalConfig()

def App_ActivateWindow(*args):
  """
    App_ActivateWindow(int windowId, Parameters parameters)

    Activate a window of the application with parameters.

    Parameters:
    -----------

    windowId:  window id

    parameters:  parameters that will be passed to the application 
    """
  return _mc.App_ActivateWindow(*args)

def App_Close():
  """
    App_Close()

    Closes the application and stops application thread. 
    """
  return _mc.App_Close()

def App_GetLaunchedWindowParameters():
  """
    App_GetLaunchedWindowParameters() -> Parameters

    Returns the parameters of the activated application window using
    ActivateWindow. 
    """
  return _mc.App_GetLaunchedWindowParameters()

def App_GetLaunchedListItem():
  """
    App_GetLaunchedListItem() -> ListItem

    Returns the list item that the application was launched with.

    this is mainly useful to get an item from the
    history/recommendation/rating. 
    """
  return _mc.App_GetLaunchedListItem()

def App_RunScript(*args):
  """
    App_RunScript(string scriptName, Parameters parameters)

    Run a python script of an application.

    Parameters:
    -----------

    scriptName:  script name

    parameters:  parameters that will be passed to the application script

    """
  return _mc.App_RunScript(*args)

def App_SendMessage(*args):
  """
    App_SendMessage(string handler, string parameter)

    Send a message to an application The mesage will be passed to a global
    handler.

    Parameters:
    -----------

    handler:  allows to specify which handler should eventually handle the
    message

    parameter:  additional string parameter 
    """
  return _mc.App_SendMessage(*args)

def App_GetLaunchedScriptParameters():
  """
    App_GetLaunchedScriptParameters() -> Parameters

    Returns the parameters of the executed script using RunScript.

    You can also access those parameters with sys.arv[1]. 
    """
  return _mc.App_GetLaunchedScriptParameters()

def App_GetId():
  """
    App_GetId() -> string

    Returns the id of the currently running application. 
    """
  return _mc.App_GetId()

def App_GetAppDir():
  """
    App_GetAppDir() -> string

    Returns the full path where the application is installed. 
    """
  return _mc.App_GetAppDir()

def App_GetAppMediaDir():
  """
    App_GetAppMediaDir() -> string

    Returns the full path where the media files of the application are
    stored. 
    """
  return _mc.App_GetAppMediaDir()

def App_GetAppSkinDir():
  """
    App_GetAppSkinDir() -> string

    Returns the full path where the skin files of the application are
    stored. 
    """
  return _mc.App_GetAppSkinDir()

def App_GetAuthenticationToken():
  """
    App_GetAuthenticationToken() -> string

    Returns an authentication token for the application.

    For boxee internal use. 
    """
  return _mc.App_GetAuthenticationToken()

def GetLocalizedString(id):
  return MC.GetLocalizedString(id)

def GetInfoString(info):
  return MC.GetInfoString(info)

def ShowDialogNotification(msg, thumbnail=""):
  MC.ShowDialogNotification(msg, thumbnail)

def ShowDialogWait():
  MC.ShowDialogWait()

def HideDialogWait():
  MC.HideDialogWait()

def ShowDialogConfirm(heading, body, cancelButton, confirmButton):
  return MC.ShowDialogConfirm(heading, body, cancelButton, confirmButton)

def ShowDialogOk(heading, body):
  MC.ShowDialogOk(heading, body)
  
def ShowDialogKeyboard(heading, value, hiddenInput):
  return MC.ShowDialogKeyboard(heading, value, hiddenInput);
  
def ShowDialogSelect(heading, choices):
  return MC.ShowDialogSelect(heading, choices)
  
def ShowCustomDialog(id):
  return MC.ShowCustomDialog(id)

def CloseActiveDialogs():
  return MC.CloseActiveDialogs()
  
def LogDebug(msg):
  MC.LogDebug(msg)

def LogInfo(msg):
  MC.LogInfo(msg)

def LogError(msg):
  MC.LogError(msg)

def GetActiveWindow():
  return MC.GetActiveWindow()

def CloseWindow():
	MC.CloseWindow()

def GetWindow(id):
  return MC.GetWindow(id)

def ActivateWindow(id):
  MC.ActivateWindow(id)
  
def GetPlayer():
  return MC.GetPlayer()
  
def GetTempDir():
  return MC.GetTempDir()
  
def GetApp():
  return MC.GetApp()    

def GetCookieJar():
  return MC.GetCookieJar()
  
def GetDirectory(strPath):
  return MC.GetDirectory(strPath)
  
def GetFocusedItem(windowId, listId):
  return MC.GetFocusedItem(windowId, listId)    
  
def GetGeoLocation() :
  return MC.GetGeoLocation()
  
def GetDeviceId() :
  return MC.GetDeviceId()
  
def GetPlatform() :
  return MC.GetPlatform()
  
def IsEmbedded():
  return MC.IsEmbedded()
  
def GetCurrentPositionInSec(strPath):
  return MC.GetCurrentPositionInSec(strPath)

def GetTimezoneCity():
  return MC.GetTimezoneCity()

def GetTimezoneCounty():
  return MC.GetTimezoneCounty()

def GetWeatherLocation():
  return MC.GetWeatherLocation()

def SetWeatherLocation(location):
  return MC.SetWeatherLocation(location)

def SetWeatherLocation2(cityName, countryCode):
  return MC.SetWeatherLocation2(cityName, countryCode)

def GetTemperatureScale():
  return MC.GetTemperatureScale()

def SetTemperatureScale(scale):
  return MC.SetTemperatureScale(scale)

def IsConnectedToInternet():
  return MC.IsConnectedToInternet()

def GetUniqueId():
  return MC.GetUniqueId()

def GetSystemLanguage():
  return MC.GetSystemLanguage()

def GetHardwareVendor():
  return MC.GetHardwareVendor()
 
def GetHardwareModel():
  return MC.GetHardwareModel()
 
def GetHardwareRevision():
  return MC.GetHardwareRevision()
 
def GetHardwareSerialNumber():
  return MC.GetHardwareSerialNumber()





# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _boxee
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _boxee.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _boxee.PySwigIterator_value(*args)
    def incr(*args): return _boxee.PySwigIterator_incr(*args)
    def decr(*args): return _boxee.PySwigIterator_decr(*args)
    def distance(*args): return _boxee.PySwigIterator_distance(*args)
    def equal(*args): return _boxee.PySwigIterator_equal(*args)
    def copy(*args): return _boxee.PySwigIterator_copy(*args)
    def next(*args): return _boxee.PySwigIterator_next(*args)
    def previous(*args): return _boxee.PySwigIterator_previous(*args)
    def advance(*args): return _boxee.PySwigIterator_advance(*args)
    def __eq__(*args): return _boxee.PySwigIterator___eq__(*args)
    def __ne__(*args): return _boxee.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _boxee.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _boxee.PySwigIterator___isub__(*args)
    def __add__(*args): return _boxee.PySwigIterator___add__(*args)
    def __sub__(*args): return _boxee.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _boxee.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class BXStringMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BXStringMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BXStringMap, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _boxee.delete_BXStringMap
    __del__ = lambda self : None;
    def HasValue(*args): return _boxee.BXStringMap_HasValue(*args)
    def GetValue(*args): return _boxee.BXStringMap_GetValue(*args)
    def SetValue(*args): return _boxee.BXStringMap_SetValue(*args)
    def ToXML(*args): return _boxee.BXStringMap_ToXML(*args)
    def FromXML(*args): return _boxee.BXStringMap_FromXML(*args)
    def __init__(self, *args): 
        this = _boxee.new_BXStringMap(*args)
        try: self.this.append(this)
        except: self.this = this
BXStringMap_swigregister = _boxee.BXStringMap_swigregister
BXStringMap_swigregister(BXStringMap)

class BXObject(BXStringMap):
    __swig_setmethods__ = {}
    for _s in [BXStringMap]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BXObject, name, value)
    __swig_getmethods__ = {}
    for _s in [BXStringMap]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BXObject, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _boxee.delete_BXObject
    __del__ = lambda self : None;
    def GetType(*args): return _boxee.BXObject_GetType(*args)
    def GetID(*args): return _boxee.BXObject_GetID(*args)
    def GetDescription(*args): return _boxee.BXObject_GetDescription(*args)
    def GetName(*args): return _boxee.BXObject_GetName(*args)
    def SetType(*args): return _boxee.BXObject_SetType(*args)
    def SetID(*args): return _boxee.BXObject_SetID(*args)
    def SetDescription(*args): return _boxee.BXObject_SetDescription(*args)
    def SetName(*args): return _boxee.BXObject_SetName(*args)
    def ToXML(*args): return _boxee.BXObject_ToXML(*args)
    def FromXML(*args): return _boxee.BXObject_FromXML(*args)
    def IsValid(*args): return _boxee.BXObject_IsValid(*args)
    def __init__(self, *args): 
        this = _boxee.new_BXObject(*args)
        try: self.this.append(this)
        except: self.this = this
BXObject_swigregister = _boxee.BXObject_swigregister
BXObject_swigregister(BXObject)

class BXConstants(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BXConstants, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BXConstants, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _boxee.delete_BXConstants
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _boxee.new_BXConstants(*args)
        try: self.this.append(this)
        except: self.this = this
BXConstants_swigregister = _boxee.BXConstants_swigregister
BXConstants_swigregister(BXConstants)

BOXEE_LIB_VER = _boxee.BOXEE_LIB_VER
BOXEE_USER_AGENT = _boxee.BOXEE_USER_AGENT
class BoxeeListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoxeeListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoxeeListener, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _boxee.delete_BoxeeListener
    __del__ = lambda self : None;
    def OnBoxeeFeedChange(*args): return _boxee.BoxeeListener_OnBoxeeFeedChange(*args)
    def OnNotification(*args): return _boxee.BoxeeListener_OnNotification(*args)
    def OnFriendsListChange(*args): return _boxee.BoxeeListener_OnFriendsListChange(*args)
    def OnConnectionDown(*args): return _boxee.BoxeeListener_OnConnectionDown(*args)
    def OnConnectionRestored(*args): return _boxee.BoxeeListener_OnConnectionRestored(*args)
    def OnFileDownloaded(*args): return _boxee.BoxeeListener_OnFileDownloaded(*args)
    def OnBoxeeResponse(*args): return _boxee.BoxeeListener_OnBoxeeResponse(*args)
    def __init__(self, *args): 
        this = _boxee.new_BoxeeListener(*args)
        try: self.this.append(this)
        except: self.this = this
BoxeeListener_swigregister = _boxee.BoxeeListener_swigregister
BoxeeListener_swigregister(BoxeeListener)

class CallbackTrigger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallbackTrigger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CallbackTrigger, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _boxee.delete_CallbackTrigger
    __del__ = lambda self : None;
    def HandleListener(*args): return _boxee.CallbackTrigger_HandleListener(*args)
CallbackTrigger_swigregister = _boxee.CallbackTrigger_swigregister
CallbackTrigger_swigregister(CallbackTrigger)

class Boxee(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Boxee, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Boxee, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _boxee.delete_Boxee
    __del__ = lambda self : None;
    __swig_getmethods__["GetInstance"] = lambda x: _boxee.Boxee_GetInstance
    if _newclass:GetInstance = staticmethod(_boxee.Boxee_GetInstance)
    def SetCredentials(*args): return _boxee.Boxee_SetCredentials(*args)
    def SetVerbose(*args): return _boxee.Boxee_SetVerbose(*args)
    def Start(*args): return _boxee.Boxee_Start(*args)
    def Stop(*args): return _boxee.Boxee_Stop(*args)
    def IsRunning(*args): return _boxee.Boxee_IsRunning(*args)
    def GetBoxeeFeed(*args): return _boxee.Boxee_GetBoxeeFeed(*args)
    def RetrieveFriendsList(*args): return _boxee.Boxee_RetrieveFriendsList(*args)
    def AddFriend(*args): return _boxee.Boxee_AddFriend(*args)
    def SetUserAction(*args): return _boxee.Boxee_SetUserAction(*args)
    def SetUserAction_bg(*args): return _boxee.Boxee_SetUserAction_bg(*args)
    def AsyncLoadUrl(*args): return _boxee.Boxee_AsyncLoadUrl(*args)
    def AddListener(*args): return _boxee.Boxee_AddListener(*args)
    def RemoveListener(*args): return _boxee.Boxee_RemoveListener(*args)
    def TriggerAllListeners(*args): return _boxee.Boxee_TriggerAllListeners(*args)
    def GetStartTime(*args): return _boxee.Boxee_GetStartTime(*args)
    def __init__(self, *args): 
        this = _boxee.new_Boxee(*args)
        try: self.this.append(this)
        except: self.this = this
Boxee_swigregister = _boxee.Boxee_swigregister
Boxee_swigregister(Boxee)
Boxee_GetInstance = _boxee.Boxee_GetInstance

class BXCredentials(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BXCredentials, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BXCredentials, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _boxee.delete_BXCredentials
    __del__ = lambda self : None;
    def SetUserName(*args): return _boxee.BXCredentials_SetUserName(*args)
    def SetPassword(*args): return _boxee.BXCredentials_SetPassword(*args)
    def SetAuthKey(*args): return _boxee.BXCredentials_SetAuthKey(*args)
    def GetUserName(*args): return _boxee.BXCredentials_GetUserName(*args)
    def GetPassword(*args): return _boxee.BXCredentials_GetPassword(*args)
    def GetAuthKey(*args): return _boxee.BXCredentials_GetAuthKey(*args)
    def __init__(self, *args): 
        this = _boxee.new_BXCredentials(*args)
        try: self.this.append(this)
        except: self.this = this
BXCredentials_swigregister = _boxee.BXCredentials_swigregister
BXCredentials_swigregister(BXCredentials)

class BXCurl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BXCurl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BXCurl, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _boxee.delete_BXCurl
    __del__ = lambda self : None;
    def HttpGetString(*args): return _boxee.BXCurl_HttpGetString(*args)
    def HttpPostString(*args): return _boxee.BXCurl_HttpPostString(*args)
    def HttpDownloadFile(*args): return _boxee.BXCurl_HttpDownloadFile(*args)
    def HttpSetHeaders(*args): return _boxee.BXCurl_HttpSetHeaders(*args)
    def HttpResetHeaders(*args): return _boxee.BXCurl_HttpResetHeaders(*args)
    def SetCredentials(*args): return _boxee.BXCurl_SetCredentials(*args)
    def SetUserAgent(*args): return _boxee.BXCurl_SetUserAgent(*args)
    def GetLastRetCodeString(*args): return _boxee.BXCurl_GetLastRetCodeString(*args)
    def GetLastRetCode(*args): return _boxee.BXCurl_GetLastRetCode(*args)
    def GetHttpHeader(*args): return _boxee.BXCurl_GetHttpHeader(*args)
    def SetVerbose(*args): return _boxee.BXCurl_SetVerbose(*args)
    __swig_getmethods__["Initialize"] = lambda x: _boxee.BXCurl_Initialize
    if _newclass:Initialize = staticmethod(_boxee.BXCurl_Initialize)
    __swig_getmethods__["DeInitialize"] = lambda x: _boxee.BXCurl_DeInitialize
    if _newclass:DeInitialize = staticmethod(_boxee.BXCurl_DeInitialize)
    def __init__(self, *args): 
        this = _boxee.new_BXCurl(*args)
        try: self.this.append(this)
        except: self.this = this
BXCurl_swigregister = _boxee.BXCurl_swigregister
BXCurl_swigregister(BXCurl)
BXCurl_Initialize = _boxee.BXCurl_Initialize
BXCurl_DeInitialize = _boxee.BXCurl_DeInitialize

class BXXMLDocument(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BXXMLDocument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BXXMLDocument, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _boxee.delete_BXXMLDocument
    __del__ = lambda self : None;
    def LoadFromString(*args): return _boxee.BXXMLDocument_LoadFromString(*args)
    def LoadFromFile(*args): return _boxee.BXXMLDocument_LoadFromFile(*args)
    def LoadFromURL(*args): return _boxee.BXXMLDocument_LoadFromURL(*args)
    def SetCredentials(*args): return _boxee.BXXMLDocument_SetCredentials(*args)
    def Parse(*args): return _boxee.BXXMLDocument_Parse(*args)
    def SetVerbose(*args): return _boxee.BXXMLDocument_SetVerbose(*args)
    def __init__(self, *args): 
        this = _boxee.new_BXXMLDocument(*args)
        try: self.this.append(this)
        except: self.this = this
BXXMLDocument_swigregister = _boxee.BXXMLDocument_swigregister
BXXMLDocument_swigregister(BXXMLDocument)

FRIEND_ATTRIB_NAME = _boxee.FRIEND_ATTRIB_NAME
FRIEND_ATTRIB_PRESENCE = _boxee.FRIEND_ATTRIB_PRESENCE
FRIEND_ATTRIB_THUMB = _boxee.FRIEND_ATTRIB_THUMB
class BXFriend(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BXFriend, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BXFriend, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _boxee.delete_BXFriend
    __del__ = lambda self : None;
    def HasAttribute(*args): return _boxee.BXFriend_HasAttribute(*args)
    def GetAttribute(*args): return _boxee.BXFriend_GetAttribute(*args)
    def SetAttribute(*args): return _boxee.BXFriend_SetAttribute(*args)
    def GetFriendId(*args): return _boxee.BXFriend_GetFriendId(*args)
    def SetFriendId(*args): return _boxee.BXFriend_SetFriendId(*args)
    def GetActionCount(*args): return _boxee.BXFriend_GetActionCount(*args)
    def GetAction(*args): return _boxee.BXFriend_GetAction(*args)
    def ParseFromXml(*args): return _boxee.BXFriend_ParseFromXml(*args)
    __swig_getmethods__["Initialize"] = lambda x: _boxee.BXFriend_Initialize
    if _newclass:Initialize = staticmethod(_boxee.BXFriend_Initialize)
    def __init__(self, *args): 
        this = _boxee.new_BXFriend(*args)
        try: self.this.append(this)
        except: self.this = this
BXFriend_swigregister = _boxee.BXFriend_swigregister
BXFriend_swigregister(BXFriend)
BXFriend_Initialize = _boxee.BXFriend_Initialize

class FriendsListIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FriendsListIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FriendsListIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _boxee.delete_FriendsListIterator
    __del__ = lambda self : None;
    def GetFriend(*args): return _boxee.FriendsListIterator_GetFriend(*args)
    def GetFriendName(*args): return _boxee.FriendsListIterator_GetFriendName(*args)
    def IsEndOfList(*args): return _boxee.FriendsListIterator_IsEndOfList(*args)
    def Next(*args): return _boxee.FriendsListIterator_Next(*args)
    def __init__(self, *args): 
        this = _boxee.new_FriendsListIterator(*args)
        try: self.this.append(this)
        except: self.this = this
FriendsListIterator_swigregister = _boxee.FriendsListIterator_swigregister
FriendsListIterator_swigregister(FriendsListIterator)

class BXFriendsList(BXXMLDocument):
    __swig_setmethods__ = {}
    for _s in [BXXMLDocument]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BXFriendsList, name, value)
    __swig_getmethods__ = {}
    for _s in [BXXMLDocument]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BXFriendsList, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _boxee.delete_BXFriendsList
    __del__ = lambda self : None;
    def Parse(*args): return _boxee.BXFriendsList_Parse(*args)
    def GetFriend(*args): return _boxee.BXFriendsList_GetFriend(*args)
    def GetListTimeStamp(*args): return _boxee.BXFriendsList_GetListTimeStamp(*args)
    def GetCount(*args): return _boxee.BXFriendsList_GetCount(*args)
    def Iterate(*args): return _boxee.BXFriendsList_Iterate(*args)
    def AddFriend(*args): return _boxee.BXFriendsList_AddFriend(*args)
    def __init__(self, *args): 
        this = _boxee.new_BXFriendsList(*args)
        try: self.this.append(this)
        except: self.this = this
BXFriendsList_swigregister = _boxee.BXFriendsList_swigregister
BXFriendsList_swigregister(BXFriendsList)

MSG_OBJ_TYPE_MOVIE = _boxee.MSG_OBJ_TYPE_MOVIE
MSG_OBJ_TYPE_TV = _boxee.MSG_OBJ_TYPE_TV
MSG_OBJ_TYPE_AUDIO_TRACK = _boxee.MSG_OBJ_TYPE_AUDIO_TRACK
MSG_OBJ_TYPE_AUDIO_ALBUM = _boxee.MSG_OBJ_TYPE_AUDIO_ALBUM
MSG_OBJ_TYPE_PICTURES = _boxee.MSG_OBJ_TYPE_PICTURES
MSG_OBJ_TYPE_UNKNOWN_VIDEO = _boxee.MSG_OBJ_TYPE_UNKNOWN_VIDEO
MSG_OBJ_TYPE_UNKNOWN_AUDIO = _boxee.MSG_OBJ_TYPE_UNKNOWN_AUDIO
MSG_OBJ_TYPE_USER = _boxee.MSG_OBJ_TYPE_USER
MSG_ACTION_TYPE_RECOMMEND = _boxee.MSG_ACTION_TYPE_RECOMMEND
MSG_ACTION_TYPE_PROMOTION = _boxee.MSG_ACTION_TYPE_PROMOTION
MSG_ACTION_TYPE_LISTEN = _boxee.MSG_ACTION_TYPE_LISTEN
MSG_ACTION_TYPE_WATCH = _boxee.MSG_ACTION_TYPE_WATCH
MSG_ACTION_TYPE_ADD_FRIEND = _boxee.MSG_ACTION_TYPE_ADD_FRIEND
MSG_ACTION_TYPE_RATE = _boxee.MSG_ACTION_TYPE_RATE
MSG_KEY_TIMESTAMP = _boxee.MSG_KEY_TIMESTAMP
MSG_KEY_DESCRIPTION = _boxee.MSG_KEY_DESCRIPTION
MSG_KEY_NAME = _boxee.MSG_KEY_NAME
MSG_KEY_TITLE = _boxee.MSG_KEY_TITLE
MSG_KEY_ARTIST = _boxee.MSG_KEY_ARTIST
MSG_KEY_ALBUM_ARTIST = _boxee.MSG_KEY_ALBUM_ARTIST
MSG_KEY_SEASON = _boxee.MSG_KEY_SEASON
MSG_KEY_ALBUM = _boxee.MSG_KEY_ALBUM
MSG_KEY_EPISODE = _boxee.MSG_KEY_EPISODE
MSG_KEY_GENRE = _boxee.MSG_KEY_GENRE
MSG_KEY_DIRECTOR = _boxee.MSG_KEY_DIRECTOR
MSG_KEY_STUDIO = _boxee.MSG_KEY_STUDIO
MSG_KEY_FILE = _boxee.MSG_KEY_FILE
MSG_KEY_IMDB_NUM = _boxee.MSG_KEY_IMDB_NUM
MSG_KEY_LIKE = _boxee.MSG_KEY_LIKE
MSG_KEY_THUMB = _boxee.MSG_KEY_THUMB
MSG_KEY_VERSION = _boxee.MSG_KEY_VERSION
MSG_KEY_BDAY = _boxee.MSG_KEY_BDAY
MSG_KEY_GENDER = _boxee.MSG_KEY_GENDER
MSG_KEY_LOCATION = _boxee.MSG_KEY_LOCATION
MSG_KEY_PROFILE = _boxee.MSG_KEY_PROFILE
class BXGeneralMessage(BXStringMap):
    __swig_setmethods__ = {}
    for _s in [BXStringMap]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BXGeneralMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [BXStringMap]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BXGeneralMessage, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _boxee.delete_BXGeneralMessage
    __del__ = lambda self : None;
    def GetMessageType(*args): return _boxee.BXGeneralMessage_GetMessageType(*args)
    def SetMessageType(*args): return _boxee.BXGeneralMessage_SetMessageType(*args)
    def GetTimestamp(*args): return _boxee.BXGeneralMessage_GetTimestamp(*args)
    def SetTimestamp(*args): return _boxee.BXGeneralMessage_SetTimestamp(*args)
    def GetObjectCount(*args): return _boxee.BXGeneralMessage_GetObjectCount(*args)
    def GetObject(*args): return _boxee.BXGeneralMessage_GetObject(*args)
    def AddObject(*args): return _boxee.BXGeneralMessage_AddObject(*args)
    def ParseFromActionNode(*args): return _boxee.BXGeneralMessage_ParseFromActionNode(*args)
    def ToXML(*args): return _boxee.BXGeneralMessage_ToXML(*args)
    __swig_getmethods__["Initialize"] = lambda x: _boxee.BXGeneralMessage_Initialize
    if _newclass:Initialize = staticmethod(_boxee.BXGeneralMessage_Initialize)
    def __init__(self, *args): 
        this = _boxee.new_BXGeneralMessage(*args)
        try: self.this.append(this)
        except: self.this = this
BXGeneralMessage_swigregister = _boxee.BXGeneralMessage_swigregister
BXGeneralMessage_swigregister(BXGeneralMessage)
BXGeneralMessage_Initialize = _boxee.BXGeneralMessage_Initialize

class BXRSSReader(BXXMLDocument):
    __swig_setmethods__ = {}
    for _s in [BXXMLDocument]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BXRSSReader, name, value)
    __swig_getmethods__ = {}
    for _s in [BXXMLDocument]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BXRSSReader, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _boxee.delete_BXRSSReader
    __del__ = lambda self : None;
    def Parse(*args): return _boxee.BXRSSReader_Parse(*args)
    def GetChannelDesc(*args): return _boxee.BXRSSReader_GetChannelDesc(*args)
    def GetChannelTitle(*args): return _boxee.BXRSSReader_GetChannelTitle(*args)
    def GetChannelLink(*args): return _boxee.BXRSSReader_GetChannelLink(*args)
    def GetChannelPubDate(*args): return _boxee.BXRSSReader_GetChannelPubDate(*args)
    def GetChannelImageLink(*args): return _boxee.BXRSSReader_GetChannelImageLink(*args)
    def QueryChannel(*args): return _boxee.BXRSSReader_QueryChannel(*args)
    def GetNumOfItems(*args): return _boxee.BXRSSReader_GetNumOfItems(*args)
    def GetItemDesc(*args): return _boxee.BXRSSReader_GetItemDesc(*args)
    def GetItemTitle(*args): return _boxee.BXRSSReader_GetItemTitle(*args)
    def GetItemPubDate(*args): return _boxee.BXRSSReader_GetItemPubDate(*args)
    def GetItemLink(*args): return _boxee.BXRSSReader_GetItemLink(*args)
    def QueryItem(*args): return _boxee.BXRSSReader_QueryItem(*args)
    def __init__(self, *args): 
        this = _boxee.new_BXRSSReader(*args)
        try: self.this.append(this)
        except: self.this = this
BXRSSReader_swigregister = _boxee.BXRSSReader_swigregister
BXRSSReader_swigregister(BXRSSReader)

class BXBoxeeFeed(BXXMLDocument):
    __swig_setmethods__ = {}
    for _s in [BXXMLDocument]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BXBoxeeFeed, name, value)
    __swig_getmethods__ = {}
    for _s in [BXXMLDocument]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BXBoxeeFeed, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _boxee.delete_BXBoxeeFeed
    __del__ = lambda self : None;
    def Parse(*args): return _boxee.BXBoxeeFeed_Parse(*args)
    def GetNumOfActions(*args): return _boxee.BXBoxeeFeed_GetNumOfActions(*args)
    def GetAction(*args): return _boxee.BXBoxeeFeed_GetAction(*args)
    def GetTimeStamp(*args): return _boxee.BXBoxeeFeed_GetTimeStamp(*args)
    def Clear(*args): return _boxee.BXBoxeeFeed_Clear(*args)
    def __init__(self, *args): 
        this = _boxee.new_BXBoxeeFeed(*args)
        try: self.this.append(this)
        except: self.this = this
BXBoxeeFeed_swigregister = _boxee.BXBoxeeFeed_swigregister
BXBoxeeFeed_swigregister(BXBoxeeFeed)

class Logger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Logger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Logger, name)
    __repr__ = _swig_repr
    BX_LOG_DEBUG = _boxee.Logger_BX_LOG_DEBUG
    BX_LOG_INFO = _boxee.Logger_BX_LOG_INFO
    BX_LOG_WARNING = _boxee.Logger_BX_LOG_WARNING
    BX_LOG_ERROR = _boxee.Logger_BX_LOG_ERROR
    __swig_destroy__ = _boxee.delete_Logger
    __del__ = lambda self : None;
    __swig_getmethods__["GetLogger"] = lambda x: _boxee.Logger_GetLogger
    if _newclass:GetLogger = staticmethod(_boxee.Logger_GetLogger)
    __swig_getmethods__["StrLogLevel"] = lambda x: _boxee.Logger_StrLogLevel
    if _newclass:StrLogLevel = staticmethod(_boxee.Logger_StrLogLevel)
    def Log(*args): return _boxee.Logger_Log(*args)
    def GetLogLevel(*args): return _boxee.Logger_GetLogLevel(*args)
    def SetLogLevel(*args): return _boxee.Logger_SetLogLevel(*args)
    def SetLoggerFunction(*args): return _boxee.Logger_SetLoggerFunction(*args)
    def __init__(self, *args): 
        this = _boxee.new_Logger(*args)
        try: self.this.append(this)
        except: self.this = this
Logger_swigregister = _boxee.Logger_swigregister
Logger_swigregister(Logger)
Logger_GetLogger = _boxee.Logger_GetLogger
Logger_StrLogLevel = _boxee.Logger_StrLogLevel

class LogRecord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogRecord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogRecord, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _boxee.delete_LogRecord
    __del__ = lambda self : None;
    __swig_setmethods__["m_line"] = _boxee.LogRecord_m_line_set
    __swig_getmethods__["m_line"] = _boxee.LogRecord_m_line_get
    if _newclass:m_line = _swig_property(_boxee.LogRecord_m_line_get, _boxee.LogRecord_m_line_set)
    __swig_setmethods__["m_file"] = _boxee.LogRecord_m_file_set
    __swig_getmethods__["m_file"] = _boxee.LogRecord_m_file_get
    if _newclass:m_file = _swig_property(_boxee.LogRecord_m_file_get, _boxee.LogRecord_m_file_set)
    __swig_setmethods__["m_function"] = _boxee.LogRecord_m_function_set
    __swig_getmethods__["m_function"] = _boxee.LogRecord_m_function_get
    if _newclass:m_function = _swig_property(_boxee.LogRecord_m_function_get, _boxee.LogRecord_m_function_set)
    def __call__(*args): return _boxee.LogRecord___call__(*args)
    def __init__(self, *args): 
        this = _boxee.new_LogRecord(*args)
        try: self.this.append(this)
        except: self.this = this
LogRecord_swigregister = _boxee.LogRecord_swigregister
LogRecord_swigregister(LogRecord)

class VecMessages(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecMessages, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecMessages, name)
    __repr__ = _swig_repr
    def iterator(*args): return _boxee.VecMessages_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _boxee.VecMessages___nonzero__(*args)
    def __len__(*args): return _boxee.VecMessages___len__(*args)
    def pop(*args): return _boxee.VecMessages_pop(*args)
    def __getslice__(*args): return _boxee.VecMessages___getslice__(*args)
    def __setslice__(*args): return _boxee.VecMessages___setslice__(*args)
    def __delslice__(*args): return _boxee.VecMessages___delslice__(*args)
    def __delitem__(*args): return _boxee.VecMessages___delitem__(*args)
    def __getitem__(*args): return _boxee.VecMessages___getitem__(*args)
    def __setitem__(*args): return _boxee.VecMessages___setitem__(*args)
    def append(*args): return _boxee.VecMessages_append(*args)
    def empty(*args): return _boxee.VecMessages_empty(*args)
    def size(*args): return _boxee.VecMessages_size(*args)
    def clear(*args): return _boxee.VecMessages_clear(*args)
    def swap(*args): return _boxee.VecMessages_swap(*args)
    def get_allocator(*args): return _boxee.VecMessages_get_allocator(*args)
    def begin(*args): return _boxee.VecMessages_begin(*args)
    def end(*args): return _boxee.VecMessages_end(*args)
    def rbegin(*args): return _boxee.VecMessages_rbegin(*args)
    def rend(*args): return _boxee.VecMessages_rend(*args)
    def pop_back(*args): return _boxee.VecMessages_pop_back(*args)
    def erase(*args): return _boxee.VecMessages_erase(*args)
    def __init__(self, *args): 
        this = _boxee.new_VecMessages(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _boxee.VecMessages_push_back(*args)
    def front(*args): return _boxee.VecMessages_front(*args)
    def back(*args): return _boxee.VecMessages_back(*args)
    def assign(*args): return _boxee.VecMessages_assign(*args)
    def resize(*args): return _boxee.VecMessages_resize(*args)
    def insert(*args): return _boxee.VecMessages_insert(*args)
    def reserve(*args): return _boxee.VecMessages_reserve(*args)
    def capacity(*args): return _boxee.VecMessages_capacity(*args)
    __swig_destroy__ = _boxee.delete_VecMessages
    __del__ = lambda self : None;
VecMessages_swigregister = _boxee.VecMessages_swigregister
VecMessages_swigregister(VecMessages)

class MessageFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageFilter, name)
    __repr__ = _swig_repr
    def iterator(*args): return _boxee.MessageFilter_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _boxee.MessageFilter___nonzero__(*args)
    def __len__(*args): return _boxee.MessageFilter___len__(*args)
    def __getitem__(*args): return _boxee.MessageFilter___getitem__(*args)
    def __delitem__(*args): return _boxee.MessageFilter___delitem__(*args)
    def has_key(*args): return _boxee.MessageFilter_has_key(*args)
    def keys(*args): return _boxee.MessageFilter_keys(*args)
    def values(*args): return _boxee.MessageFilter_values(*args)
    def items(*args): return _boxee.MessageFilter_items(*args)
    def __contains__(*args): return _boxee.MessageFilter___contains__(*args)
    def key_iterator(*args): return _boxee.MessageFilter_key_iterator(*args)
    def value_iterator(*args): return _boxee.MessageFilter_value_iterator(*args)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(*args): return _boxee.MessageFilter___setitem__(*args)
    def __init__(self, *args): 
        this = _boxee.new_MessageFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(*args): return _boxee.MessageFilter_empty(*args)
    def size(*args): return _boxee.MessageFilter_size(*args)
    def clear(*args): return _boxee.MessageFilter_clear(*args)
    def swap(*args): return _boxee.MessageFilter_swap(*args)
    def get_allocator(*args): return _boxee.MessageFilter_get_allocator(*args)
    def begin(*args): return _boxee.MessageFilter_begin(*args)
    def end(*args): return _boxee.MessageFilter_end(*args)
    def rbegin(*args): return _boxee.MessageFilter_rbegin(*args)
    def rend(*args): return _boxee.MessageFilter_rend(*args)
    def count(*args): return _boxee.MessageFilter_count(*args)
    def erase(*args): return _boxee.MessageFilter_erase(*args)
    def find(*args): return _boxee.MessageFilter_find(*args)
    def lower_bound(*args): return _boxee.MessageFilter_lower_bound(*args)
    def upper_bound(*args): return _boxee.MessageFilter_upper_bound(*args)
    __swig_destroy__ = _boxee.delete_MessageFilter
    __del__ = lambda self : None;
MessageFilter_swigregister = _boxee.MessageFilter_swigregister
MessageFilter_swigregister(MessageFilter)




#ifndef XAPP_PLAYER_H_
#define XAPP_PLAYER_H_

#include "AppException.h"
#include "XAPP_ListItem.h"
#include <queue>

class IEventCallback;
class IActionCallback;

namespace XAPP
{

/**
 * This class represents the Player object used for playing all kinds of media items
 */
class Player
{
public:
  enum PLAYER_ACTION
  {
    XAPP_PLAYER_ACTION_NONE,
    XAPP_PLAYER_ACTION_NEXT,
    XAPP_PLAYER_ACTION_PREV,
    XAPP_PLAYER_ACTION_STOP,
    XAPP_PLAYER_ACTION_SEEK,
    XAPP_PLAYER_ACTION_OSD_EXT
  };
  
  /**
   * Events generated by the player
   */
  enum PLAYER_EVENT
  {
    EVENT_NEXT_ITEM,
    EVENT_STOPPED,
    EVENT_ENDED,
    EVENT_STARTED,
    EVENT_NONE
  };
  
  enum PLAYER_REPEAT_STATE { REPEAT_NONE = 0, REPEAT_ONE, REPEAT_ALL };

  /**
   * Creates a new player object
   * 
   * @param bRegisterCallbacks indicates whether player action and event callbacks
   * are tracked, false by default. If you enable callbacks you must have a single instance
   * of a player in your application.
   */
  Player(bool bRegisterCallbacks = false);
  
  virtual ~Player();
  
  /**
   *  Play item with specified index from the current playlist
   *  
   *  @param iItem index of the item to play from the current playlist
   *  
   *  TODO: Can not use the enum because of name conflict with existing PLAYLIST_MUSIC and PLAYLIST_VIDEO 
   *  
   */
  virtual void PlaySelected(int iItem, int type = 0 /*PlayList::PlayListType::PLAYLIST_MUSIC*/);
  
  /**
   * Returns the current time in seconds of the currently playing media.
   * Fractional portions of a second are possible.  This returns a double to
   * be consistent with GetTotalTime() and SeekTime(). Throws an exception
   * if no item is currently playing.
   * 
   */
  virtual double GetTime() throw (XAPP::AppException);
  
  /**
   * Returns the current time (EXT-X-PROGRAM-DATE-TIME) in seconds of the currently playing HTTP live stream.
   * 
   */
  virtual double GetPlaylistTimecode() throw (XAPP::AppException);

  /**
   * Sets the current position of the currently playing media to the specified
   * time in seconds.  Fractional portions of a second are valid.  The passed
   * time is the time offset from the beginning of the file as opposed to a
   * delta from the current position.  This method accepts a double to be
   * consistent with GetTime() and GetTotalTime().
   * 
   * @param seekTime time in seconds
   */
  virtual void SeekTime(double seekTime);  
  
  /**
   * Returns the total time in seconds of the current media.  Fractional
   * portions of a second are possible - but not necessarily supported by the
   * player class.  This returns a double to be consistent with GetTime() and
   * SeekTime(). Throws an exception if no item is currently playing.
   * 
   */
  virtual double GetTotalTime() throw (XAPP::AppException);
  
  /**
   * Stops playback
   */
  virtual void Stop();
  
  /**
   * Plays the specified list item
   * 
   * @param item item to play
   */
  virtual void Play(ListItem item);
  
  virtual void QueueNextItem(ListItem item);

  /**
   * Plays the specified list item
   *
   * @param item item to play
   */
  virtual void PlayRaw(ListItem &item);

  void UpdateItem(ListItem &item);

  virtual int FeedRaw(unsigned char* data, unsigned int length);

  virtual void FlushRaw();

  virtual void RawClose();

  virtual bool RawIsEmpty();

  virtual void RawSetEOF();

  virtual void QueueNextRaw(ListItem item);

  int m_currentRawPipe;

  bool m_bFirstFeed;

  /**
   * Plays the specified list item without switching to full screen video window
   *
   * @param item item to play
   */
  virtual void PlayInBackground(ListItem item);

  /**
   * Open Media Action Dialog on specified item
   * 
   * @param item item to play
   */
  virtual void PlayWithActionMenu(ListItem item);
  
  /**
   * Plays list of pictures in slideshow
   *
   * @param pictures - list of pictures to present
   * @param bRandom - always shuffle list
   * @param bNotRandom - do not shuffle list (if true) if false use "slideshow.shuffle" setting
   * @param strPictureToStart - picture to start with
   * @param startPaused - whether the slide show will be started in paused state
   */
  virtual void PlaySlideshow(ListItems pictures, bool bRandom, bool bNotRandom, const std::string& strPictureToStart, bool startPaused);

  /**
   * Pause playback
   */
  virtual void Pause();
  
  /**
   * Skip to next item in the playlist
   */
  virtual void PlayNext();
  
  /**
   * Skip to the previous item in the playlist
   */
  virtual void PlayPrevious();

  /**
   * Disable specific player action
   * Use XAPP_PLAYER_ACTION_NONE to unlock all action
   * 
   * @param action action to lock
   */
  virtual void LockPlayerAction(XAPP::Player::PLAYER_ACTION action);
  
  /**
   * Returns the last event that occured in the player
   */
  virtual XAPP::Player::PLAYER_EVENT GetLastPlayerEvent();
  
  /**
   * Set player event
   * 
   * @param event player event
   */
  virtual void SetLastPlayerEvent(XAPP::Player::PLAYER_EVENT event);
  
  /**
   * Get last action performed by the player
   */
  virtual XAPP::Player::PLAYER_ACTION GetLastPlayerAction();
  
  /**
   * Set lst player action
   * @param action player action
   */
  virtual void SetLastPlayerAction(XAPP::Player::PLAYER_ACTION action);
  
  /**
   * Set lst player seek time
   * @param action player action
   */
  virtual void SetSeekRequestTime(int iTime) {m_seekTime = iTime;}


  virtual void SetOsdExtAmount(int amount) {m_osdExtAmount = amount;}
  /**
   * Get lst player seek time
   * @param action player action
   */
  virtual int GetSeekRequestTime() {int i = m_seekTime; m_seekTime = -1; return i;}

  /**
   * Returns the currently playing item
   */
  virtual XAPP::ListItem GetPlayingItem();
  
  /**
   * Returns true if Boxee is currently playing media, false otherwise
   */
  virtual bool IsPlaying();
  
  /**
   * Returns true if Boxee is currently playing audio, false otherwise 
   */
  virtual bool IsPlayingAudio();
  
  /**
   * Returns true if Boxee is currently playing video, false otherwise
   */
  virtual bool IsPlayingVideo();
  
  /**
   * Returns true if playback is paused
   */
  virtual bool IsPaused();
  
  /**
   * Returns true if the player is currently at the caching phase
   */
  virtual bool IsCaching();
  
  /**
   * Returns true if the player is currently perfroming fast forward operation
   */
  virtual bool IsForwarding();
  
  /**
   * Returns true if the player is currently perfroming rewind operation
   */
  virtual bool IsRewinding();
  
  /**
   * Set Boxee volume
   * 
   * @param percent volume value (in percent)
   */
  virtual void SetVolume(int percent);
  
  /**
   * Returns current volume of the application
   */
  virtual int  GetVolume();
  
  /**
   * Mute Boxee
   */
  virtual void ToggleMute();

  /**
   * Return true if the current playlist is shuffle
   */
  virtual bool IsShuffle();

  virtual void ResumeAudio();

  /**
   * Return true if the current playlist is repeat
   */
  virtual PLAYER_REPEAT_STATE GetRepeatState();

private:
  
  IEventCallback* m_eventCallback;
  IActionCallback* m_actionCallback;
  XAPP::Player::PLAYER_ACTION m_lastAction;
  XAPP::Player::PLAYER_EVENT m_lastEvent;
  ListItem                   m_item;
  int                        m_seekTime, m_osdExtAmount;
};

}

#endif
